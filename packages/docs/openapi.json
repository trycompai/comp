{
  "openapi": "3.0.0",
  "paths": {
    "/v1/organization": {
      "get": {
        "description": "Returns detailed information about the authenticated organization. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "OrganizationController_getOrganization_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The organization ID",
                      "example": "org_abc123def456"
                    },
                    "name": {
                      "type": "string",
                      "description": "Organization name",
                      "example": "Acme Corporation"
                    },
                    "slug": {
                      "type": "string",
                      "description": "Organization slug",
                      "example": "acme-corp"
                    },
                    "logo": {
                      "type": "string",
                      "nullable": true,
                      "description": "Organization logo URL",
                      "example": "https://example.com/logo.png"
                    },
                    "metadata": {
                      "type": "string",
                      "nullable": true,
                      "description": "Additional metadata in JSON format",
                      "example": "{\"theme\": \"dark\", \"preferences\": {}}"
                    },
                    "website": {
                      "type": "string",
                      "nullable": true,
                      "description": "Organization website URL",
                      "example": "https://acme-corp.com"
                    },
                    "onboardingCompleted": {
                      "type": "boolean",
                      "description": "Whether onboarding is completed",
                      "example": true
                    },
                    "hasAccess": {
                      "type": "boolean",
                      "description": "Whether organization has access to the platform",
                      "example": true
                    },
                    "fleetDmLabelId": {
                      "type": "integer",
                      "nullable": true,
                      "description": "FleetDM label ID for device management",
                      "example": 123
                    },
                    "isFleetSetupCompleted": {
                      "type": "boolean",
                      "description": "Whether FleetDM setup is completed",
                      "example": false
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the organization was created"
                    },
                    "authType": {
                      "type": "string",
                      "enum": [
                        "api-key",
                        "session"
                      ],
                      "description": "How the request was authenticated"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired API key"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Get organization information",
        "tags": [
          "Organization"
        ]
      },
      "patch": {
        "description": "Partially updates the authenticated organization. Only provided fields will be updated. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "OrganizationController_updateOrganization_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Organization update data",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Organization name",
                    "example": "New Acme Corporation"
                  },
                  "slug": {
                    "type": "string",
                    "description": "Organization slug",
                    "example": "new-acme-corp"
                  },
                  "logo": {
                    "type": "string",
                    "description": "Organization logo URL",
                    "example": "https://example.com/logo.png"
                  },
                  "metadata": {
                    "type": "string",
                    "description": "Additional metadata in JSON format",
                    "example": "{\"theme\": \"dark\", \"preferences\": {}}"
                  },
                  "website": {
                    "type": "string",
                    "description": "Organization website URL",
                    "example": "https://acme-corp.com"
                  },
                  "onboardingCompleted": {
                    "type": "boolean",
                    "description": "Whether onboarding is completed",
                    "example": true
                  },
                  "hasAccess": {
                    "type": "boolean",
                    "description": "Whether organization has access to the platform",
                    "example": true
                  },
                  "fleetDmLabelId": {
                    "type": "integer",
                    "description": "FleetDM label ID for device management",
                    "example": 123
                  },
                  "isFleetSetupCompleted": {
                    "type": "boolean",
                    "description": "Whether FleetDM setup is completed",
                    "example": false
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The organization ID",
                      "example": "org_abc123def456"
                    },
                    "name": {
                      "type": "string",
                      "description": "Organization name",
                      "example": "New Acme Corporation"
                    },
                    "slug": {
                      "type": "string",
                      "description": "Organization slug",
                      "example": "new-acme-corp"
                    },
                    "logo": {
                      "type": "string",
                      "nullable": true,
                      "description": "Organization logo URL",
                      "example": "https://example.com/logo.png"
                    },
                    "metadata": {
                      "type": "string",
                      "nullable": true,
                      "description": "Additional metadata in JSON format",
                      "example": "{\"theme\": \"dark\", \"preferences\": {}}"
                    },
                    "website": {
                      "type": "string",
                      "nullable": true,
                      "description": "Organization website URL",
                      "example": "https://acme-corp.com"
                    },
                    "onboardingCompleted": {
                      "type": "boolean",
                      "description": "Whether onboarding is completed",
                      "example": true
                    },
                    "hasAccess": {
                      "type": "boolean",
                      "description": "Whether organization has access to the platform",
                      "example": true
                    },
                    "fleetDmLabelId": {
                      "type": "integer",
                      "nullable": true,
                      "description": "FleetDM label ID for device management",
                      "example": 123
                    },
                    "isFleetSetupCompleted": {
                      "type": "boolean",
                      "description": "Whether FleetDM setup is completed",
                      "example": false
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the organization was created"
                    },
                    "authType": {
                      "type": "string",
                      "enum": [
                        "api-key",
                        "session"
                      ],
                      "description": "How the request was authenticated"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid update data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid slug format"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired API key"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization with ID org_abc123def456 not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Update organization",
        "tags": [
          "Organization"
        ]
      },
      "delete": {
        "description": "Permanently deletes the authenticated organization. This action cannot be undone. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "OrganizationController_deleteOrganization_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates successful deletion",
                      "example": true
                    },
                    "deletedOrganization": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The deleted organization ID",
                          "example": "org_abc123def456"
                        },
                        "name": {
                          "type": "string",
                          "description": "The deleted organization name",
                          "example": "Acme Corporation"
                        }
                      }
                    },
                    "authType": {
                      "type": "string",
                      "enum": [
                        "api-key",
                        "session"
                      ],
                      "description": "How the request was authenticated"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired API key"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization with ID org_abc123def456 not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Delete organization",
        "tags": [
          "Organization"
        ]
      }
    },
    "/v1/people": {
      "get": {
        "description": "Returns all members for the authenticated organization with their user information. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "PeopleController_getAllPeople_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "People retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PeopleResponseDto"
                      }
                    },
                    "count": {
                      "type": "number",
                      "description": "Total number of people",
                      "example": 25
                    },
                    "authType": {
                      "type": "string",
                      "enum": [
                        "api-key",
                        "session"
                      ],
                      "description": "How the request was authenticated"
                    },
                    "authenticatedUser": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "User ID",
                          "example": "usr_abc123def456"
                        },
                        "email": {
                          "type": "string",
                          "description": "User email",
                          "example": "user@company.com"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": "mem_abc123def456",
                      "organizationId": "org_abc123def456",
                      "userId": "usr_abc123def456",
                      "role": "admin",
                      "createdAt": "2024-01-01T00:00:00Z",
                      "department": "it",
                      "isActive": true,
                      "fleetDmLabelId": 123,
                      "user": {
                        "id": "usr_abc123def456",
                        "name": "John Doe",
                        "email": "john.doe@company.com",
                        "emailVerified": true,
                        "image": "https://example.com/avatar.jpg",
                        "createdAt": "2024-01-01T00:00:00Z",
                        "updatedAt": "2024-01-15T00:00:00Z",
                        "lastLogin": "2024-01-15T12:00:00Z"
                      }
                    }
                  ],
                  "count": 1,
                  "authType": "api-key",
                  "authenticatedUser": {
                    "id": "usr_abc123def456",
                    "email": "user@company.com"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired API key"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization with ID org_abc123def456 not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Failed to retrieve members"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Get all people",
        "tags": [
          "People"
        ]
      },
      "post": {
        "description": "Adds a new member to the authenticated organization. The user must already exist in the system. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "PeopleController_createMember_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Member creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePeopleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Member created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PeopleResponseDto"
                },
                "example": {
                  "id": "mem_abc123def456",
                  "organizationId": "org_abc123def456",
                  "userId": "usr_abc123def456",
                  "role": "admin",
                  "createdAt": "2024-01-01T00:00:00Z",
                  "department": "it",
                  "isActive": true,
                  "fleetDmLabelId": 123,
                  "user": {
                    "id": "usr_abc123def456",
                    "name": "John Doe",
                    "email": "john.doe@company.com",
                    "emailVerified": true,
                    "image": "https://example.com/avatar.jpg",
                    "createdAt": "2024-01-01T00:00:00Z",
                    "updatedAt": "2024-01-15T00:00:00Z",
                    "lastLogin": "2024-01-15T12:00:00Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid member data or user already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User user@example.com is already a member of this organization"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization or user not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User with ID usr_abc123def456 not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Failed to create member"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Create a new member",
        "tags": [
          "People"
        ]
      }
    },
    "/v1/people/bulk": {
      "post": {
        "description": "Bulk adds multiple members to the authenticated organization. Each member must have a valid user ID that exists in the system. Members who already exist in the organization or have invalid data will be skipped with error details returned. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "PeopleController_bulkCreateMembers_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Bulk member creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCreatePeopleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Bulk member creation completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PeopleResponseDto"
                      },
                      "description": "Successfully created members"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "number",
                            "description": "Index in the original array where the error occurred",
                            "example": 2
                          },
                          "userId": {
                            "type": "string",
                            "description": "User ID that failed to be added",
                            "example": "usr_abc123def456"
                          },
                          "error": {
                            "type": "string",
                            "description": "Error message explaining why the member could not be created",
                            "example": "User user@example.com is already a member of this organization"
                          }
                        }
                      },
                      "description": "Members that failed to be created with error details"
                    },
                    "summary": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "number",
                          "description": "Total number of members in the request",
                          "example": 5
                        },
                        "successful": {
                          "type": "number",
                          "description": "Number of members successfully created",
                          "example": 3
                        },
                        "failed": {
                          "type": "number",
                          "description": "Number of members that failed to be created",
                          "example": 2
                        }
                      }
                    },
                    "authType": {
                      "type": "string",
                      "enum": [
                        "api-key",
                        "session"
                      ],
                      "description": "How the request was authenticated"
                    },
                    "authenticatedUser": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "User ID",
                          "example": "usr_abc123def456"
                        },
                        "email": {
                          "type": "string",
                          "description": "User email",
                          "example": "user@company.com"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "created": [
                    {
                      "id": "mem_abc123def456",
                      "organizationId": "org_abc123def456",
                      "userId": "usr_abc123def456",
                      "role": "member",
                      "createdAt": "2024-01-01T00:00:00Z",
                      "department": "it",
                      "isActive": true,
                      "fleetDmLabelId": 123,
                      "user": {
                        "id": "usr_abc123def456",
                        "name": "John Doe",
                        "email": "john.doe@company.com",
                        "emailVerified": true,
                        "image": "https://example.com/avatar.jpg",
                        "createdAt": "2024-01-01T00:00:00Z",
                        "updatedAt": "2024-01-15T00:00:00Z",
                        "lastLogin": "2024-01-15T12:00:00Z"
                      }
                    }
                  ],
                  "errors": [
                    {
                      "index": 2,
                      "userId": "usr_xyz789abc123",
                      "error": "User user2@example.com is already a member of this organization"
                    }
                  ],
                  "summary": {
                    "total": 2,
                    "successful": 1,
                    "failed": 1
                  },
                  "authType": "api-key",
                  "authenticatedUser": {
                    "id": "usr_admin123",
                    "email": "admin@company.com"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid bulk data or validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Members array cannot be empty"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization with ID org_abc123def456 not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Bulk creation failed"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Add multiple members to organization",
        "tags": [
          "People"
        ]
      }
    },
    "/v1/people/{id}": {
      "get": {
        "description": "Returns a specific member by ID for the authenticated organization with their user information. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "PeopleController_getPersonById_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Member ID",
            "schema": {
              "example": "mem_abc123def456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Person retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PeopleResponseDto"
                },
                "example": {
                  "id": "mem_abc123def456",
                  "organizationId": "org_abc123def456",
                  "userId": "usr_abc123def456",
                  "role": "admin",
                  "createdAt": "2024-01-01T00:00:00Z",
                  "department": "it",
                  "isActive": true,
                  "fleetDmLabelId": 123,
                  "user": {
                    "id": "usr_abc123def456",
                    "name": "John Doe",
                    "email": "john.doe@company.com",
                    "emailVerified": true,
                    "image": "https://example.com/avatar.jpg",
                    "createdAt": "2024-01-01T00:00:00Z",
                    "updatedAt": "2024-01-15T00:00:00Z",
                    "lastLogin": "2024-01-15T12:00:00Z"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization or member not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Member with ID mem_abc123def456 not found in organization org_abc123def456"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Get person by ID",
        "tags": [
          "People"
        ]
      },
      "patch": {
        "description": "Partially updates a member. Only provided fields will be updated. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "PeopleController_updateMember_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Member ID",
            "schema": {
              "example": "mem_abc123def456",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Member update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePeopleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Member updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PeopleResponseDto"
                },
                "example": {
                  "id": "mem_abc123def456",
                  "organizationId": "org_abc123def456",
                  "userId": "usr_abc123def456",
                  "role": "member",
                  "createdAt": "2024-01-01T00:00:00Z",
                  "department": "it",
                  "isActive": true,
                  "fleetDmLabelId": 123,
                  "user": {
                    "id": "usr_abc123def456",
                    "name": "John Doe",
                    "email": "john.doe@company.com",
                    "emailVerified": true,
                    "image": "https://example.com/avatar.jpg",
                    "createdAt": "2024-01-01T00:00:00Z",
                    "updatedAt": "2024-01-15T00:00:00Z",
                    "lastLogin": "2024-01-15T12:00:00Z"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid update data or user conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User user@example.com is already a member of this organization"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization, member, or user not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Member with ID mem_abc123def456 not found in organization org_abc123def456"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Update member",
        "tags": [
          "People"
        ]
      },
      "delete": {
        "description": "Permanently removes a member from the organization. This action cannot be undone. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "PeopleController_deleteMember_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Member ID",
            "schema": {
              "example": "mem_abc123def456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates successful deletion",
                      "example": true
                    },
                    "deletedMember": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The deleted member ID",
                          "example": "mem_abc123def456"
                        },
                        "name": {
                          "type": "string",
                          "description": "The deleted member name",
                          "example": "John Doe"
                        },
                        "email": {
                          "type": "string",
                          "description": "The deleted member email",
                          "example": "john.doe@company.com"
                        }
                      }
                    },
                    "authType": {
                      "type": "string",
                      "enum": [
                        "api-key",
                        "session"
                      ],
                      "description": "How the request was authenticated"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization or member not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Member with ID mem_abc123def456 not found in organization org_abc123def456"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Failed to delete member"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Delete member",
        "tags": [
          "People"
        ]
      }
    },
    "/v1/risks": {
      "get": {
        "description": "Returns all risks for the authenticated organization. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "RisksController_getAllRisks_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Risks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Risk ID",
                            "example": "rsk_abc123def456"
                          },
                          "title": {
                            "type": "string",
                            "description": "Risk title",
                            "example": "Data breach vulnerability in user authentication system"
                          },
                          "description": {
                            "type": "string",
                            "description": "Risk description",
                            "example": "Weak password requirements could lead to unauthorized access to user accounts"
                          },
                          "category": {
                            "type": "string",
                            "enum": [
                              "customer",
                              "governance",
                              "operations",
                              "other",
                              "people",
                              "regulatory",
                              "reporting",
                              "resilience",
                              "technology",
                              "vendor_management"
                            ],
                            "example": "technology"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "open",
                              "pending",
                              "closed",
                              "archived"
                            ],
                            "example": "open"
                          },
                          "likelihood": {
                            "type": "string",
                            "enum": [
                              "very_unlikely",
                              "unlikely",
                              "possible",
                              "likely",
                              "very_likely"
                            ],
                            "example": "possible"
                          },
                          "impact": {
                            "type": "string",
                            "enum": [
                              "insignificant",
                              "minor",
                              "moderate",
                              "major",
                              "severe"
                            ],
                            "example": "major"
                          },
                          "treatmentStrategy": {
                            "type": "string",
                            "enum": [
                              "accept",
                              "avoid",
                              "mitigate",
                              "transfer"
                            ],
                            "example": "mitigate"
                          },
                          "assigneeId": {
                            "type": "string",
                            "nullable": true,
                            "description": "ID of the user assigned to this risk",
                            "example": "mem_abc123def456"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "When the risk was created"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "When the risk was last updated"
                          }
                        }
                      }
                    },
                    "count": {
                      "type": "number",
                      "description": "Total number of risks",
                      "example": 15
                    },
                    "authType": {
                      "type": "string",
                      "enum": [
                        "api-key",
                        "session"
                      ],
                      "description": "How the request was authenticated"
                    },
                    "authenticatedUser": {
                      "type": "object",
                      "description": "User information (only for session auth)",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "usr_def456ghi789"
                        },
                        "email": {
                          "type": "string",
                          "example": "user@example.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired API key"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization with ID org_abc123def456 not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Get all risks",
        "tags": [
          "Risks"
        ]
      },
      "post": {
        "description": "Creates a new risk for the authenticated organization. All required fields must be provided. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "RisksController_createRisk_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Risk creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRiskDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Risk created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Risk ID",
                      "example": "rsk_abc123def456"
                    },
                    "title": {
                      "type": "string",
                      "description": "Risk title",
                      "example": "Data breach vulnerability in user authentication system"
                    },
                    "description": {
                      "type": "string",
                      "description": "Risk description",
                      "example": "Weak password requirements could lead to unauthorized access to user accounts"
                    },
                    "category": {
                      "type": "string",
                      "enum": [
                        "customer",
                        "governance",
                        "operations",
                        "other",
                        "people",
                        "regulatory",
                        "reporting",
                        "resilience",
                        "technology",
                        "vendor_management"
                      ],
                      "example": "technology"
                    },
                    "department": {
                      "type": "string",
                      "enum": [
                        "none",
                        "admin",
                        "gov",
                        "hr",
                        "it",
                        "itsm",
                        "qms"
                      ],
                      "nullable": true,
                      "example": "it"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "open",
                        "pending",
                        "closed",
                        "archived"
                      ],
                      "example": "open"
                    },
                    "likelihood": {
                      "type": "string",
                      "enum": [
                        "very_unlikely",
                        "unlikely",
                        "possible",
                        "likely",
                        "very_likely"
                      ],
                      "example": "possible"
                    },
                    "impact": {
                      "type": "string",
                      "enum": [
                        "insignificant",
                        "minor",
                        "moderate",
                        "major",
                        "severe"
                      ],
                      "example": "major"
                    },
                    "residualLikelihood": {
                      "type": "string",
                      "enum": [
                        "very_unlikely",
                        "unlikely",
                        "possible",
                        "likely",
                        "very_likely"
                      ],
                      "example": "unlikely"
                    },
                    "residualImpact": {
                      "type": "string",
                      "enum": [
                        "insignificant",
                        "minor",
                        "moderate",
                        "major",
                        "severe"
                      ],
                      "example": "minor"
                    },
                    "treatmentStrategyDescription": {
                      "type": "string",
                      "nullable": true,
                      "example": "Implement multi-factor authentication and strengthen password requirements"
                    },
                    "treatmentStrategy": {
                      "type": "string",
                      "enum": [
                        "accept",
                        "avoid",
                        "mitigate",
                        "transfer"
                      ],
                      "example": "mitigate"
                    },
                    "organizationId": {
                      "type": "string",
                      "example": "org_abc123def456"
                    },
                    "assigneeId": {
                      "type": "string",
                      "nullable": true,
                      "description": "ID of the user assigned to this risk",
                      "example": "mem_abc123def456"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the risk was created"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the risk was last updated"
                    },
                    "authType": {
                      "type": "string",
                      "enum": [
                        "api-key",
                        "session"
                      ],
                      "description": "How the request was authenticated"
                    },
                    "authenticatedUser": {
                      "type": "object",
                      "description": "User information (only for session auth)",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "usr_def456ghi789"
                        },
                        "email": {
                          "type": "string",
                          "example": "user@example.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "title should not be empty",
                        "description should not be empty",
                        "category must be a valid enum value"
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired API key"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization with ID org_abc123def456 not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Create a new risk",
        "tags": [
          "Risks"
        ]
      }
    },
    "/v1/risks/{id}": {
      "get": {
        "description": "Returns a specific risk by ID for the authenticated organization. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "RisksController_getRiskById_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Risk ID",
            "schema": {
              "example": "rsk_abc123def456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Risk retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Risk ID",
                      "example": "rsk_abc123def456"
                    },
                    "title": {
                      "type": "string",
                      "description": "Risk title",
                      "example": "Data breach vulnerability in user authentication system"
                    },
                    "description": {
                      "type": "string",
                      "description": "Risk description",
                      "example": "Weak password requirements could lead to unauthorized access to user accounts"
                    },
                    "category": {
                      "type": "string",
                      "enum": [
                        "customer",
                        "governance",
                        "operations",
                        "other",
                        "people",
                        "regulatory",
                        "reporting",
                        "resilience",
                        "technology",
                        "vendor_management"
                      ],
                      "example": "technology"
                    },
                    "department": {
                      "type": "string",
                      "enum": [
                        "none",
                        "admin",
                        "gov",
                        "hr",
                        "it",
                        "itsm",
                        "qms"
                      ],
                      "nullable": true,
                      "example": "it"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "open",
                        "pending",
                        "closed",
                        "archived"
                      ],
                      "example": "open"
                    },
                    "likelihood": {
                      "type": "string",
                      "enum": [
                        "very_unlikely",
                        "unlikely",
                        "possible",
                        "likely",
                        "very_likely"
                      ],
                      "example": "possible"
                    },
                    "impact": {
                      "type": "string",
                      "enum": [
                        "insignificant",
                        "minor",
                        "moderate",
                        "major",
                        "severe"
                      ],
                      "example": "major"
                    },
                    "residualLikelihood": {
                      "type": "string",
                      "enum": [
                        "very_unlikely",
                        "unlikely",
                        "possible",
                        "likely",
                        "very_likely"
                      ],
                      "example": "unlikely"
                    },
                    "residualImpact": {
                      "type": "string",
                      "enum": [
                        "insignificant",
                        "minor",
                        "moderate",
                        "major",
                        "severe"
                      ],
                      "example": "minor"
                    },
                    "treatmentStrategyDescription": {
                      "type": "string",
                      "nullable": true,
                      "example": "Implement multi-factor authentication and strengthen password requirements"
                    },
                    "treatmentStrategy": {
                      "type": "string",
                      "enum": [
                        "accept",
                        "avoid",
                        "mitigate",
                        "transfer"
                      ],
                      "example": "mitigate"
                    },
                    "organizationId": {
                      "type": "string",
                      "example": "org_abc123def456"
                    },
                    "assigneeId": {
                      "type": "string",
                      "nullable": true,
                      "description": "ID of the user assigned to this risk",
                      "example": "mem_abc123def456"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the risk was created"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the risk was last updated"
                    },
                    "authType": {
                      "type": "string",
                      "enum": [
                        "api-key",
                        "session"
                      ],
                      "description": "How the request was authenticated"
                    },
                    "authenticatedUser": {
                      "type": "object",
                      "description": "User information (only for session auth)",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "usr_def456ghi789"
                        },
                        "email": {
                          "type": "string",
                          "example": "user@example.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired API key"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Risk not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Risk with ID rsk_abc123def456 not found in organization org_abc123def456"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Get risk by ID",
        "tags": [
          "Risks"
        ]
      },
      "patch": {
        "description": "Partially updates a risk. Only provided fields will be updated. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "RisksController_updateRisk_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Risk ID",
            "schema": {
              "example": "rsk_abc123def456",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Risk update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRiskDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Risk updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Risk ID",
                      "example": "rsk_abc123def456"
                    },
                    "title": {
                      "type": "string",
                      "description": "Risk title",
                      "example": "Data breach vulnerability in user authentication system"
                    },
                    "description": {
                      "type": "string",
                      "description": "Risk description",
                      "example": "Weak password requirements could lead to unauthorized access to user accounts"
                    },
                    "category": {
                      "type": "string",
                      "enum": [
                        "customer",
                        "governance",
                        "operations",
                        "other",
                        "people",
                        "regulatory",
                        "reporting",
                        "resilience",
                        "technology",
                        "vendor_management"
                      ],
                      "example": "technology"
                    },
                    "department": {
                      "type": "string",
                      "enum": [
                        "none",
                        "admin",
                        "gov",
                        "hr",
                        "it",
                        "itsm",
                        "qms"
                      ],
                      "nullable": true,
                      "example": "it"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "open",
                        "pending",
                        "closed",
                        "archived"
                      ],
                      "example": "open"
                    },
                    "likelihood": {
                      "type": "string",
                      "enum": [
                        "very_unlikely",
                        "unlikely",
                        "possible",
                        "likely",
                        "very_likely"
                      ],
                      "example": "possible"
                    },
                    "impact": {
                      "type": "string",
                      "enum": [
                        "insignificant",
                        "minor",
                        "moderate",
                        "major",
                        "severe"
                      ],
                      "example": "major"
                    },
                    "residualLikelihood": {
                      "type": "string",
                      "enum": [
                        "very_unlikely",
                        "unlikely",
                        "possible",
                        "likely",
                        "very_likely"
                      ],
                      "example": "unlikely"
                    },
                    "residualImpact": {
                      "type": "string",
                      "enum": [
                        "insignificant",
                        "minor",
                        "moderate",
                        "major",
                        "severe"
                      ],
                      "example": "minor"
                    },
                    "treatmentStrategyDescription": {
                      "type": "string",
                      "nullable": true,
                      "example": "Implement multi-factor authentication and strengthen password requirements"
                    },
                    "treatmentStrategy": {
                      "type": "string",
                      "enum": [
                        "accept",
                        "avoid",
                        "mitigate",
                        "transfer"
                      ],
                      "example": "mitigate"
                    },
                    "organizationId": {
                      "type": "string",
                      "example": "org_abc123def456"
                    },
                    "assigneeId": {
                      "type": "string",
                      "nullable": true,
                      "description": "ID of the user assigned to this risk",
                      "example": "mem_abc123def456"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the risk was created"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the risk was last updated"
                    },
                    "authType": {
                      "type": "string",
                      "enum": [
                        "api-key",
                        "session"
                      ],
                      "description": "How the request was authenticated"
                    },
                    "authenticatedUser": {
                      "type": "object",
                      "description": "User information (only for session auth)",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "usr_def456ghi789"
                        },
                        "email": {
                          "type": "string",
                          "example": "user@example.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "title should not be empty",
                        "category must be a valid enum value",
                        "status must be a valid enum value"
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired API key"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Risk not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Risk with ID rsk_abc123def456 not found in organization org_abc123def456"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Update risk",
        "tags": [
          "Risks"
        ]
      },
      "delete": {
        "description": "Permanently removes a risk from the organization. This action cannot be undone. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "RisksController_deleteRisk_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Risk ID",
            "schema": {
              "example": "rsk_abc123def456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Risk deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Risk deleted successfully"
                    },
                    "deletedRisk": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Deleted risk ID",
                          "example": "rsk_abc123def456"
                        },
                        "title": {
                          "type": "string",
                          "description": "Deleted risk title",
                          "example": "Data breach vulnerability in user authentication system"
                        }
                      }
                    },
                    "authType": {
                      "type": "string",
                      "enum": [
                        "api-key",
                        "session"
                      ],
                      "description": "How the request was authenticated"
                    },
                    "authenticatedUser": {
                      "type": "object",
                      "description": "User information (only for session auth)",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "usr_def456ghi789"
                        },
                        "email": {
                          "type": "string",
                          "example": "user@example.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired API key"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Risk not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Risk with ID rsk_abc123def456 not found in organization org_abc123def456"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Delete risk",
        "tags": [
          "Risks"
        ]
      }
    },
    "/v1/vendors": {
      "get": {
        "description": "Returns all vendors for the authenticated organization. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "VendorsController_getAllVendors_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vendors retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Vendor ID",
                            "example": "vnd_abc123def456"
                          },
                          "name": {
                            "type": "string",
                            "description": "Vendor name",
                            "example": "CloudTech Solutions Inc."
                          },
                          "description": {
                            "type": "string",
                            "description": "Vendor description",
                            "example": "Cloud infrastructure provider offering AWS-like services"
                          },
                          "category": {
                            "type": "string",
                            "enum": [
                              "cloud",
                              "infrastructure",
                              "software_as_a_service",
                              "finance",
                              "marketing",
                              "sales",
                              "hr",
                              "other"
                            ],
                            "example": "cloud"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "not_assessed",
                              "in_progress",
                              "assessed"
                            ],
                            "example": "not_assessed"
                          },
                          "inherentProbability": {
                            "type": "string",
                            "enum": [
                              "very_unlikely",
                              "unlikely",
                              "possible",
                              "likely",
                              "very_likely"
                            ],
                            "example": "possible"
                          },
                          "inherentImpact": {
                            "type": "string",
                            "enum": [
                              "insignificant",
                              "minor",
                              "moderate",
                              "major",
                              "severe"
                            ],
                            "example": "moderate"
                          },
                          "residualProbability": {
                            "type": "string",
                            "enum": [
                              "very_unlikely",
                              "unlikely",
                              "possible",
                              "likely",
                              "very_likely"
                            ],
                            "example": "unlikely"
                          },
                          "residualImpact": {
                            "type": "string",
                            "enum": [
                              "insignificant",
                              "minor",
                              "moderate",
                              "major",
                              "severe"
                            ],
                            "example": "minor"
                          },
                          "website": {
                            "type": "string",
                            "nullable": true,
                            "example": "https://www.cloudtechsolutions.com"
                          },
                          "assigneeId": {
                            "type": "string",
                            "nullable": true,
                            "description": "ID of the user assigned to manage this vendor",
                            "example": "mem_abc123def456"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "When the vendor was created"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "When the vendor was last updated"
                          }
                        }
                      }
                    },
                    "count": {
                      "type": "number",
                      "description": "Total number of vendors",
                      "example": 12
                    },
                    "authType": {
                      "type": "string",
                      "enum": [
                        "api-key",
                        "session"
                      ],
                      "description": "How the request was authenticated"
                    },
                    "authenticatedUser": {
                      "type": "object",
                      "description": "User information (only for session auth)",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "usr_def456ghi789"
                        },
                        "email": {
                          "type": "string",
                          "example": "user@example.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired API key"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization with ID org_abc123def456 not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Get all vendors",
        "tags": [
          "Vendors"
        ]
      },
      "post": {
        "description": "Creates a new vendor for the authenticated organization. All required fields must be provided. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "VendorsController_createVendor_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Vendor creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVendorDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vendor created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Vendor ID",
                      "example": "vnd_abc123def456"
                    },
                    "name": {
                      "type": "string",
                      "description": "Vendor name",
                      "example": "CloudTech Solutions Inc."
                    },
                    "description": {
                      "type": "string",
                      "description": "Vendor description",
                      "example": "Cloud infrastructure provider offering AWS-like services including compute, storage, and networking solutions for enterprise customers."
                    },
                    "category": {
                      "type": "string",
                      "enum": [
                        "cloud",
                        "infrastructure",
                        "software_as_a_service",
                        "finance",
                        "marketing",
                        "sales",
                        "hr",
                        "other"
                      ],
                      "example": "cloud"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "not_assessed",
                        "in_progress",
                        "assessed"
                      ],
                      "example": "not_assessed"
                    },
                    "inherentProbability": {
                      "type": "string",
                      "enum": [
                        "very_unlikely",
                        "unlikely",
                        "possible",
                        "likely",
                        "very_likely"
                      ],
                      "example": "possible"
                    },
                    "inherentImpact": {
                      "type": "string",
                      "enum": [
                        "insignificant",
                        "minor",
                        "moderate",
                        "major",
                        "severe"
                      ],
                      "example": "moderate"
                    },
                    "residualProbability": {
                      "type": "string",
                      "enum": [
                        "very_unlikely",
                        "unlikely",
                        "possible",
                        "likely",
                        "very_likely"
                      ],
                      "example": "unlikely"
                    },
                    "residualImpact": {
                      "type": "string",
                      "enum": [
                        "insignificant",
                        "minor",
                        "moderate",
                        "major",
                        "severe"
                      ],
                      "example": "minor"
                    },
                    "website": {
                      "type": "string",
                      "nullable": true,
                      "example": "https://www.cloudtechsolutions.com"
                    },
                    "organizationId": {
                      "type": "string",
                      "example": "org_abc123def456"
                    },
                    "assigneeId": {
                      "type": "string",
                      "nullable": true,
                      "description": "ID of the user assigned to manage this vendor",
                      "example": "mem_abc123def456"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the vendor was created"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the vendor was last updated"
                    },
                    "authType": {
                      "type": "string",
                      "enum": [
                        "api-key",
                        "session"
                      ],
                      "description": "How the request was authenticated"
                    },
                    "authenticatedUser": {
                      "type": "object",
                      "description": "User information (only for session auth)",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "usr_def456ghi789"
                        },
                        "email": {
                          "type": "string",
                          "example": "user@example.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "name should not be empty",
                        "description should not be empty",
                        "category must be a valid enum value",
                        "website must be a URL address"
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired API key"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization with ID org_abc123def456 not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Create a new vendor",
        "tags": [
          "Vendors"
        ]
      }
    },
    "/v1/vendors/{id}": {
      "get": {
        "description": "Returns a specific vendor by ID for the authenticated organization. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "VendorsController_getVendorById_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Vendor ID",
            "schema": {
              "example": "vnd_abc123def456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vendor retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Vendor ID",
                      "example": "vnd_abc123def456"
                    },
                    "name": {
                      "type": "string",
                      "description": "Vendor name",
                      "example": "CloudTech Solutions Inc."
                    },
                    "description": {
                      "type": "string",
                      "description": "Vendor description",
                      "example": "Cloud infrastructure provider offering AWS-like services including compute, storage, and networking solutions for enterprise customers."
                    },
                    "category": {
                      "type": "string",
                      "enum": [
                        "cloud",
                        "infrastructure",
                        "software_as_a_service",
                        "finance",
                        "marketing",
                        "sales",
                        "hr",
                        "other"
                      ],
                      "example": "cloud"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "not_assessed",
                        "in_progress",
                        "assessed"
                      ],
                      "example": "not_assessed"
                    },
                    "inherentProbability": {
                      "type": "string",
                      "enum": [
                        "very_unlikely",
                        "unlikely",
                        "possible",
                        "likely",
                        "very_likely"
                      ],
                      "example": "possible"
                    },
                    "inherentImpact": {
                      "type": "string",
                      "enum": [
                        "insignificant",
                        "minor",
                        "moderate",
                        "major",
                        "severe"
                      ],
                      "example": "moderate"
                    },
                    "residualProbability": {
                      "type": "string",
                      "enum": [
                        "very_unlikely",
                        "unlikely",
                        "possible",
                        "likely",
                        "very_likely"
                      ],
                      "example": "unlikely"
                    },
                    "residualImpact": {
                      "type": "string",
                      "enum": [
                        "insignificant",
                        "minor",
                        "moderate",
                        "major",
                        "severe"
                      ],
                      "example": "minor"
                    },
                    "website": {
                      "type": "string",
                      "nullable": true,
                      "example": "https://www.cloudtechsolutions.com"
                    },
                    "organizationId": {
                      "type": "string",
                      "example": "org_abc123def456"
                    },
                    "assigneeId": {
                      "type": "string",
                      "nullable": true,
                      "description": "ID of the user assigned to manage this vendor",
                      "example": "mem_abc123def456"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the vendor was created"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the vendor was last updated"
                    },
                    "authType": {
                      "type": "string",
                      "enum": [
                        "api-key",
                        "session"
                      ],
                      "description": "How the request was authenticated"
                    },
                    "authenticatedUser": {
                      "type": "object",
                      "description": "User information (only for session auth)",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "usr_def456ghi789"
                        },
                        "email": {
                          "type": "string",
                          "example": "user@example.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired API key"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Vendor not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Vendor with ID vnd_abc123def456 not found in organization org_abc123def456"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Get vendor by ID",
        "tags": [
          "Vendors"
        ]
      },
      "patch": {
        "description": "Partially updates a vendor. Only provided fields will be updated. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "VendorsController_updateVendor_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Vendor ID",
            "schema": {
              "example": "vnd_abc123def456",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Vendor update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVendorDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vendor updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Vendor ID",
                      "example": "vnd_abc123def456"
                    },
                    "name": {
                      "type": "string",
                      "description": "Vendor name",
                      "example": "CloudTech Solutions Inc."
                    },
                    "description": {
                      "type": "string",
                      "description": "Vendor description",
                      "example": "Cloud infrastructure provider offering AWS-like services including compute, storage, and networking solutions for enterprise customers."
                    },
                    "category": {
                      "type": "string",
                      "enum": [
                        "cloud",
                        "infrastructure",
                        "software_as_a_service",
                        "finance",
                        "marketing",
                        "sales",
                        "hr",
                        "other"
                      ],
                      "example": "cloud"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "not_assessed",
                        "in_progress",
                        "assessed"
                      ],
                      "example": "assessed"
                    },
                    "inherentProbability": {
                      "type": "string",
                      "enum": [
                        "very_unlikely",
                        "unlikely",
                        "possible",
                        "likely",
                        "very_likely"
                      ],
                      "example": "possible"
                    },
                    "inherentImpact": {
                      "type": "string",
                      "enum": [
                        "insignificant",
                        "minor",
                        "moderate",
                        "major",
                        "severe"
                      ],
                      "example": "moderate"
                    },
                    "residualProbability": {
                      "type": "string",
                      "enum": [
                        "very_unlikely",
                        "unlikely",
                        "possible",
                        "likely",
                        "very_likely"
                      ],
                      "example": "unlikely"
                    },
                    "residualImpact": {
                      "type": "string",
                      "enum": [
                        "insignificant",
                        "minor",
                        "moderate",
                        "major",
                        "severe"
                      ],
                      "example": "minor"
                    },
                    "website": {
                      "type": "string",
                      "nullable": true,
                      "example": "https://www.cloudtechsolutions.com"
                    },
                    "organizationId": {
                      "type": "string",
                      "example": "org_abc123def456"
                    },
                    "assigneeId": {
                      "type": "string",
                      "nullable": true,
                      "description": "ID of the user assigned to manage this vendor",
                      "example": "mem_abc123def456"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the vendor was created"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When the vendor was last updated"
                    },
                    "authType": {
                      "type": "string",
                      "enum": [
                        "api-key",
                        "session"
                      ],
                      "description": "How the request was authenticated"
                    },
                    "authenticatedUser": {
                      "type": "object",
                      "description": "User information (only for session auth)",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "usr_def456ghi789"
                        },
                        "email": {
                          "type": "string",
                          "example": "user@example.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "name should not be empty",
                        "category must be a valid enum value",
                        "status must be a valid enum value",
                        "website must be a URL address"
                      ]
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired API key"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Vendor not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Vendor with ID vnd_abc123def456 not found in organization org_abc123def456"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Update vendor",
        "tags": [
          "Vendors"
        ]
      },
      "delete": {
        "description": "Permanently removes a vendor from the organization. This action cannot be undone. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "VendorsController_deleteVendor_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Vendor ID",
            "schema": {
              "example": "vnd_abc123def456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vendor deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Vendor deleted successfully"
                    },
                    "deletedVendor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Deleted vendor ID",
                          "example": "vnd_abc123def456"
                        },
                        "name": {
                          "type": "string",
                          "description": "Deleted vendor name",
                          "example": "CloudTech Solutions Inc."
                        }
                      }
                    },
                    "authType": {
                      "type": "string",
                      "enum": [
                        "api-key",
                        "session"
                      ],
                      "description": "How the request was authenticated"
                    },
                    "authenticatedUser": {
                      "type": "object",
                      "description": "User information (only for session auth)",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "usr_def456ghi789"
                        },
                        "email": {
                          "type": "string",
                          "example": "user@example.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired API key"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Vendor not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Vendor with ID vnd_abc123def456 not found in organization org_abc123def456"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Delete vendor",
        "tags": [
          "Vendors"
        ]
      }
    },
    "/v1/context": {
      "get": {
        "description": "Returns all context entries for the authenticated organization. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "ContextController_getAllContext_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Context entries retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "organizationId": {
                            "type": "string"
                          },
                          "question": {
                            "type": "string"
                          },
                          "answer": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "count": {
                      "type": "number"
                    },
                    "authType": {
                      "type": "string",
                      "enum": [
                        "api-key",
                        "session"
                      ]
                    }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": "ctx_abc123def456",
                      "organizationId": "org_xyz789uvw012",
                      "question": "How do we handle user authentication in our application?",
                      "answer": "We use a hybrid authentication system supporting both API keys and session-based authentication.",
                      "tags": [
                        "authentication",
                        "security",
                        "api",
                        "sessions"
                      ],
                      "createdAt": "2024-01-15T10:30:00.000Z",
                      "updatedAt": "2024-01-15T14:20:00.000Z"
                    },
                    {
                      "id": "ctx_ghi789jkl012",
                      "organizationId": "org_xyz789uvw012",
                      "question": "What database do we use and why?",
                      "answer": "We use PostgreSQL as our primary database with Prisma as the ORM.",
                      "tags": [
                        "database",
                        "postgresql",
                        "prisma",
                        "architecture"
                      ],
                      "createdAt": "2024-01-14T09:15:00.000Z",
                      "updatedAt": "2024-01-14T09:15:00.000Z"
                    }
                  ],
                  "count": 2,
                  "authType": "apikey"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    }
                  }
                },
                "example": {
                  "message": "Unauthorized",
                  "statusCode": 401
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    }
                  }
                },
                "example": {
                  "message": "Organization not found",
                  "statusCode": 404
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    }
                  }
                },
                "example": {
                  "message": "Internal server error",
                  "statusCode": 500
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Get all context entries",
        "tags": [
          "Context"
        ]
      },
      "post": {
        "description": "Creates a new context entry for the authenticated organization. All required fields must be provided. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "ContextController_createContext_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Context entry data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContextDto"
              },
              "examples": {
                "Authentication Context": {
                  "value": {
                    "question": "How do we handle user authentication in our application?",
                    "answer": "We use a hybrid authentication system supporting both API keys and session-based authentication. API keys are used for programmatic access while sessions are used for web interface interactions.",
                    "tags": [
                      "authentication",
                      "security",
                      "api",
                      "sessions"
                    ]
                  }
                },
                "Database Context": {
                  "value": {
                    "question": "What database do we use and why?",
                    "answer": "We use PostgreSQL as our primary database with Prisma as the ORM. PostgreSQL provides excellent performance, ACID compliance, and supports advanced features like JSON columns and full-text search.",
                    "tags": [
                      "database",
                      "postgresql",
                      "prisma",
                      "architecture"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Context entry created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "organizationId": {
                      "type": "string"
                    },
                    "question": {
                      "type": "string"
                    },
                    "answer": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "authType": {
                      "type": "string",
                      "enum": [
                        "api-key",
                        "session"
                      ]
                    }
                  }
                },
                "example": {
                  "id": "ctx_abc123def456",
                  "organizationId": "org_xyz789uvw012",
                  "question": "How do we handle user authentication in our application?",
                  "answer": "We use a hybrid authentication system supporting both API keys and session-based authentication.",
                  "tags": [
                    "authentication",
                    "security",
                    "api",
                    "sessions"
                  ],
                  "createdAt": "2024-01-15T10:30:00.000Z",
                  "updatedAt": "2024-01-15T10:30:00.000Z",
                  "authType": "apikey"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "error": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number"
                    }
                  }
                },
                "example": {
                  "message": [
                    "question should not be empty",
                    "answer should not be empty"
                  ],
                  "error": "Bad Request",
                  "statusCode": 400
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    }
                  }
                },
                "example": {
                  "message": "Unauthorized",
                  "statusCode": 401
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    }
                  }
                },
                "example": {
                  "message": "Organization not found",
                  "statusCode": 404
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    }
                  }
                },
                "example": {
                  "message": "Internal server error",
                  "statusCode": 500
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Create a new context entry",
        "tags": [
          "Context"
        ]
      }
    },
    "/v1/context/{id}": {
      "get": {
        "description": "Returns a specific context entry by ID for the authenticated organization. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "ContextController_getContextById_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Context entry ID",
            "schema": {
              "example": "ctx_abc123def456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Context entry retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "ctx_abc123def456"
                    },
                    "organizationId": {
                      "type": "string",
                      "example": "org_xyz789uvw012"
                    },
                    "question": {
                      "type": "string"
                    },
                    "answer": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "authentication",
                        "security"
                      ]
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "authType": {
                      "type": "string",
                      "enum": [
                        "api-key",
                        "session"
                      ]
                    }
                  }
                },
                "example": {
                  "id": "ctx_abc123def456",
                  "organizationId": "org_xyz789uvw012",
                  "question": "How do we handle user authentication in our application?",
                  "answer": "We use a hybrid authentication system supporting both API keys and session-based authentication.",
                  "tags": [
                    "authentication",
                    "security",
                    "api",
                    "sessions"
                  ],
                  "createdAt": "2024-01-15T10:30:00.000Z",
                  "updatedAt": "2024-01-15T14:20:00.000Z",
                  "authType": "apikey"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    }
                  }
                },
                "example": {
                  "message": "Unauthorized",
                  "statusCode": 401
                }
              }
            }
          },
          "404": {
            "description": "Context entry not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    }
                  }
                },
                "example": {
                  "message": "Context entry with ID ctx_abc123def456 not found in organization org_xyz789uvw012",
                  "statusCode": 404
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    }
                  }
                },
                "example": {
                  "message": "Internal server error",
                  "statusCode": 500
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Get context entry by ID",
        "tags": [
          "Context"
        ]
      },
      "patch": {
        "description": "Partially updates a context entry. Only provided fields will be updated. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "ContextController_updateContext_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Context entry ID",
            "schema": {
              "example": "ctx_abc123def456",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Partial context entry data to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContextDto"
              },
              "examples": {
                "Update Tags": {
                  "value": {
                    "tags": [
                      "authentication",
                      "security",
                      "api",
                      "sessions",
                      "updated"
                    ]
                  }
                },
                "Update Answer": {
                  "value": {
                    "answer": "Updated: We use a hybrid authentication system supporting both API keys and session-based authentication. Recent updates include support for OAuth2 providers."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Context entry updated successfully",
            "content": {
              "application/json": {
                "example": {
                  "id": "ctx_abc123def456",
                  "organizationId": "org_xyz789uvw012",
                  "question": "How do we handle user authentication in our application?",
                  "answer": "Updated: We use a hybrid authentication system supporting both API keys and session-based authentication with OAuth2 support.",
                  "tags": [
                    "authentication",
                    "security",
                    "api",
                    "sessions",
                    "oauth2"
                  ],
                  "createdAt": "2024-01-15T10:30:00.000Z",
                  "updatedAt": "2024-01-15T15:45:00.000Z",
                  "authType": "apikey"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "content": {
              "application/json": {
                "example": {
                  "message": [
                    "tags must be an array of strings"
                  ],
                  "error": "Bad Request",
                  "statusCode": 400
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication",
            "content": {
              "application/json": {
                "example": {
                  "message": "Unauthorized",
                  "statusCode": 401
                }
              }
            }
          },
          "404": {
            "description": "Context entry not found",
            "content": {
              "application/json": {
                "example": {
                  "message": "Context entry with ID ctx_abc123def456 not found in organization org_xyz789uvw012",
                  "statusCode": 404
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "message": "Internal server error",
                  "statusCode": 500
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Update context entry",
        "tags": [
          "Context"
        ]
      },
      "delete": {
        "description": "Permanently removes a context entry from the organization. This action cannot be undone. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "ContextController_deleteContext_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Context entry ID",
            "schema": {
              "example": "ctx_abc123def456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Context entry deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "deletedContext": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "question": {
                          "type": "string"
                        }
                      }
                    },
                    "authType": {
                      "type": "string",
                      "enum": [
                        "api-key",
                        "session"
                      ]
                    }
                  }
                },
                "example": {
                  "message": "Context entry deleted successfully",
                  "deletedContext": {
                    "id": "ctx_abc123def456",
                    "question": "How do we handle user authentication in our application?"
                  },
                  "authType": "apikey"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    }
                  }
                },
                "example": {
                  "message": "Unauthorized",
                  "statusCode": 401
                }
              }
            }
          },
          "404": {
            "description": "Context entry not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    }
                  }
                },
                "example": {
                  "message": "Context entry with ID ctx_abc123def456 not found in organization org_xyz789uvw012",
                  "statusCode": 404
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "statusCode": {
                      "type": "number",
                      "example": 500
                    }
                  }
                },
                "example": {
                  "message": "Internal server error",
                  "statusCode": 500
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Delete context entry",
        "tags": [
          "Context"
        ]
      }
    },
    "/v1/devices": {
      "get": {
        "description": "Returns all devices for the authenticated organization from FleetDM. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "DevicesController_getAllDevices_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Devices retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeviceResponseDto"
                      }
                    },
                    "count": {
                      "type": "number",
                      "description": "Total number of devices",
                      "example": 25
                    },
                    "authType": {
                      "type": "string",
                      "enum": [
                        "api-key",
                        "session"
                      ],
                      "description": "How the request was authenticated"
                    },
                    "authenticatedUser": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "User ID",
                          "example": "usr_abc123def456"
                        },
                        "email": {
                          "type": "string",
                          "description": "User email",
                          "example": "user@company.com"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired API key"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization with ID org_abc123def456 not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - FleetDM integration issue",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization does not have FleetDM configured"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Get all devices",
        "tags": [
          "Devices"
        ]
      }
    },
    "/v1/devices/member/{memberId}": {
      "get": {
        "description": "Returns all devices assigned to a specific member within the authenticated organization. Devices are fetched from FleetDM using the member's dedicated fleetDmLabelId. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "DevicesController_getDevicesByMember_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "required": true,
            "in": "path",
            "description": "Member ID to get devices for",
            "schema": {
              "example": "mem_abc123def456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member devices retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesByMemberResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization or member not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Member with ID mem_abc123def456 not found in organization org_abc123def456"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - FleetDM integration issue"
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Get devices by member ID",
        "tags": [
          "Devices"
        ]
      }
    },
    "/v1/policies": {
      "get": {
        "description": "Returns all policies for the authenticated organization. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "PoliciesController_getAllPolicies_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policies retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyResponseDto"
                  }
                },
                "example": [
                  {
                    "id": "pol_abc123def456",
                    "name": "Data Privacy Policy",
                    "status": "draft",
                    "content": [
                      {
                        "type": "paragraph",
                        "content": [
                          {
                            "type": "text",
                            "text": "..."
                          }
                        ]
                      }
                    ],
                    "isRequiredToSign": true,
                    "signedBy": [],
                    "createdAt": "2024-01-01T00:00:00.000Z",
                    "updatedAt": "2024-01-15T00:00:00.000Z",
                    "organizationId": "org_abc123def456"
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Get all policies",
        "tags": [
          "Policies"
        ]
      },
      "post": {
        "description": "Creates a new policy for the authenticated organization. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "PoliciesController_createPolicy_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Policy creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePolicyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Policy created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyResponseDto"
                },
                "example": {
                  "id": "pol_abc123def456",
                  "name": "Data Privacy Policy",
                  "description": "This policy outlines how we handle and protect personal data",
                  "status": "draft",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Policy content here"
                        }
                      ]
                    }
                  ],
                  "frequency": "yearly",
                  "department": "it",
                  "isRequiredToSign": true,
                  "signedBy": [],
                  "reviewDate": "2024-12-31T00:00:00.000Z",
                  "isArchived": false,
                  "createdAt": "2024-01-01T00:00:00.000Z",
                  "updatedAt": "2024-01-15T00:00:00.000Z",
                  "organizationId": "org_abc123def456",
                  "assigneeId": "usr_abc123def456",
                  "approverId": "usr_xyz789abc123"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid policy data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid policy content format"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Create a new policy",
        "tags": [
          "Policies"
        ]
      }
    },
    "/v1/policies/{id}": {
      "get": {
        "description": "Returns a specific policy by ID for the authenticated organization. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "PoliciesController_getPolicy_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Policy ID",
            "schema": {
              "example": "pol_abc123def456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policy retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyResponseDto"
                },
                "example": {
                  "id": "pol_abc123def456",
                  "name": "Data Privacy Policy",
                  "status": "draft",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "..."
                        }
                      ]
                    }
                  ],
                  "isRequiredToSign": true,
                  "signedBy": [],
                  "createdAt": "2024-01-01T00:00:00.000Z",
                  "updatedAt": "2024-01-15T00:00:00.000Z",
                  "organizationId": "org_abc123def456"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Policy not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Policy with ID pol_abc123def456 not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Get policy by ID",
        "tags": [
          "Policies"
        ]
      },
      "patch": {
        "description": "Partially updates a policy. Only provided fields will be updated. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "PoliciesController_updatePolicy_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Policy ID",
            "schema": {
              "example": "pol_abc123def456",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Policy update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePolicyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Policy updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyResponseDto"
                },
                "example": {
                  "id": "pol_abc123def456",
                  "name": "Data Privacy Policy",
                  "description": "This policy outlines how we handle and protect personal data",
                  "status": "published",
                  "content": [
                    {
                      "type": "heading",
                      "attrs": {
                        "level": 2
                      },
                      "content": [
                        {
                          "type": "text",
                          "text": "Purpose"
                        }
                      ]
                    }
                  ],
                  "frequency": "yearly",
                  "department": "it",
                  "isRequiredToSign": true,
                  "signedBy": [
                    "usr_123"
                  ],
                  "reviewDate": "2024-12-31T00:00:00.000Z",
                  "isArchived": false,
                  "createdAt": "2024-01-01T00:00:00.000Z",
                  "updatedAt": "2024-01-15T00:00:00.000Z",
                  "organizationId": "org_abc123def456",
                  "assigneeId": "usr_abc123def456",
                  "approverId": "usr_xyz789abc123"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid update data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Validation failed"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Policy not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Policy with ID pol_abc123def456 not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Update policy",
        "tags": [
          "Policies"
        ]
      },
      "delete": {
        "description": "Permanently deletes a policy. This action cannot be undone. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "PoliciesController_deletePolicy_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Policy ID",
            "schema": {
              "example": "pol_abc123def456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policy deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates successful deletion",
                      "example": true
                    },
                    "deletedPolicy": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The deleted policy ID",
                          "example": "pol_abc123def456"
                        },
                        "name": {
                          "type": "string",
                          "description": "The deleted policy name",
                          "example": "Data Privacy Policy"
                        }
                      }
                    },
                    "authType": {
                      "type": "string",
                      "enum": [
                        "api-key",
                        "session"
                      ],
                      "description": "How the request was authenticated"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication or insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Policy not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Policy with ID pol_abc123def456 not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Delete policy",
        "tags": [
          "Policies"
        ]
      }
    },
    "/v1/device-agent/mac": {
      "get": {
        "description": "Downloads the Comp AI Device Agent installer for macOS as a DMG file. The agent helps monitor device compliance and security policies. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "DeviceAgentController_downloadMacAgent_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "macOS agent DMG file download",
            "content": {
              "application/x-apple-diskimage": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": "Binary DMG file content"
              }
            },
            "headers": {
              "Content-Disposition": {
                "description": "Indicates file should be downloaded with specific filename",
                "schema": {
                  "type": "string",
                  "example": "attachment; filename=\"Comp AI Agent-1.0.0-arm64.dmg\""
                }
              },
              "Content-Type": {
                "description": "MIME type for macOS disk image",
                "schema": {
                  "type": "string",
                  "example": "application/x-apple-diskimage"
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Download macOS Device Agent",
        "tags": [
          "Device Agent"
        ]
      }
    },
    "/v1/device-agent/windows": {
      "get": {
        "description": "Downloads a ZIP package containing the Comp AI Device Agent installer for Windows, along with setup scripts and instructions. The package includes an MSI installer, setup batch script customized for the organization and user, and a README with installation instructions. Supports both API key authentication (X-API-Key header) and session authentication (cookies + X-Organization-Id header).",
        "operationId": "DeviceAgentController_downloadWindowsAgent_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Windows agent ZIP file download containing MSI installer and setup scripts",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": "Binary ZIP file content"
              }
            },
            "headers": {
              "Content-Disposition": {
                "description": "Indicates file should be downloaded with specific filename",
                "schema": {
                  "type": "string",
                  "example": "attachment; filename=\"compai-device-agent-windows.zip\""
                }
              },
              "Content-Type": {
                "description": "MIME type for ZIP archive",
                "schema": {
                  "type": "string",
                  "example": "application/zip"
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Download Windows Device Agent ZIP",
        "tags": [
          "Device Agent"
        ]
      }
    },
    "/v1/attachments/{attachmentId}/download": {
      "get": {
        "description": "Generate a fresh signed URL for downloading any attachment",
        "operationId": "AttachmentsController_getAttachmentDownloadUrl_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attachmentId",
            "required": true,
            "in": "path",
            "description": "Unique attachment identifier",
            "schema": {
              "example": "att_abc123def456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Download URL generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "downloadUrl": {
                      "type": "string",
                      "description": "Signed URL for downloading the file",
                      "example": "https://bucket.s3.amazonaws.com/path/to/file.pdf?signature=..."
                    },
                    "expiresIn": {
                      "type": "number",
                      "description": "URL expiration time in seconds",
                      "example": 900
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Get attachment download URL",
        "tags": [
          "Attachments"
        ]
      }
    },
    "/v1/tasks": {
      "get": {
        "description": "Retrieve all tasks for the authenticated organization",
        "operationId": "TasksController_getTasks_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskResponseDto"
                  }
                },
                "example": [
                  {
                    "id": "tsk_abc123def456",
                    "title": "Implement user authentication",
                    "description": "Add OAuth 2.0 authentication to the platform",
                    "status": "in_progress",
                    "createdAt": "2024-01-15T10:30:00Z",
                    "updatedAt": "2024-01-15T10:30:00Z"
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Get all tasks",
        "tags": [
          "Tasks"
        ]
      }
    },
    "/v1/tasks/{taskId}": {
      "get": {
        "description": "Retrieve a specific task by its ID",
        "operationId": "TasksController_getTask_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "taskId",
            "required": true,
            "in": "path",
            "description": "Unique task identifier",
            "schema": {
              "example": "tsk_abc123def456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskResponseDto"
                },
                "example": {
                  "id": "tsk_abc123def456",
                  "title": "Implement user authentication",
                  "description": "Add OAuth 2.0 authentication to the platform",
                  "status": "in_progress",
                  "createdAt": "2024-01-15T10:30:00Z",
                  "updatedAt": "2024-01-15T10:30:00Z"
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Task with ID tsk_abc123def456 not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Get task by ID",
        "tags": [
          "Tasks"
        ]
      }
    },
    "/v1/tasks/{taskId}/attachments": {
      "get": {
        "description": "Retrieve all attachments for a specific task",
        "operationId": "TasksController_getTaskAttachments_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "taskId",
            "required": true,
            "in": "path",
            "description": "Unique task identifier",
            "schema": {
              "example": "tsk_abc123def456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attachments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttachmentResponseDto"
                  }
                },
                "example": [
                  {
                    "id": "att_abc123def456",
                    "name": "evidence.pdf",
                    "type": "application/pdf",
                    "size": 123456,
                    "downloadUrl": "https://bucket.s3.amazonaws.com/path/to/file.pdf?signature=...",
                    "createdAt": "2024-01-15T10:30:00Z"
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Task with ID tsk_abc123def456 not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Get task attachments",
        "tags": [
          "Tasks"
        ]
      },
      "post": {
        "description": "Upload a file attachment to a specific task",
        "operationId": "TasksController_uploadTaskAttachment_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "taskId",
            "required": true,
            "in": "path",
            "description": "Unique task identifier",
            "schema": {
              "example": "tsk_abc123def456",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadAttachmentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Attachment uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentResponseDto"
                },
                "example": {
                  "id": "att_abc123def456",
                  "entityId": "tsk_abc123def456",
                  "entityType": "task",
                  "fileName": "evidence.pdf",
                  "fileType": "application/pdf",
                  "fileSize": 123456,
                  "createdAt": "2024-01-01T00:00:00Z",
                  "createdBy": "usr_abc123def456"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file data or file too large",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "File exceeds maximum allowed size"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Task with ID tsk_abc123def456 not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Upload attachment to task",
        "tags": [
          "Tasks"
        ]
      }
    },
    "/v1/tasks/{taskId}/attachments/{attachmentId}/download": {
      "get": {
        "description": "Generate a signed URL for downloading a task attachment",
        "operationId": "TasksController_getTaskAttachmentDownloadUrl_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "taskId",
            "required": true,
            "in": "path",
            "description": "Unique task identifier",
            "schema": {
              "example": "tsk_abc123def456",
              "type": "string"
            }
          },
          {
            "name": "attachmentId",
            "required": true,
            "in": "path",
            "description": "Unique attachment identifier",
            "schema": {
              "example": "att_abc123def456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Download URL generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "downloadUrl": {
                      "type": "string",
                      "description": "Signed URL for downloading the file",
                      "example": "https://bucket.s3.amazonaws.com/path/to/file.pdf?signature=..."
                    },
                    "expiresIn": {
                      "type": "number",
                      "description": "URL expiration time in seconds",
                      "example": 900
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task or attachment not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Task or attachment not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Get attachment download URL",
        "tags": [
          "Tasks"
        ]
      }
    },
    "/v1/tasks/{taskId}/attachments/{attachmentId}": {
      "delete": {
        "description": "Delete a specific attachment from a task",
        "operationId": "TasksController_deleteTaskAttachment_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "taskId",
            "required": true,
            "in": "path",
            "description": "Unique task identifier",
            "schema": {
              "example": "tsk_abc123def456",
              "type": "string"
            }
          },
          {
            "name": "attachmentId",
            "required": true,
            "in": "path",
            "description": "Unique attachment identifier",
            "schema": {
              "example": "att_abc123def456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attachment deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "deletedAttachmentId": {
                      "type": "string",
                      "example": "att_abc123def456"
                    },
                    "message": {
                      "type": "string",
                      "example": "Attachment deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task or attachment not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Task or attachment not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Delete task attachment",
        "tags": [
          "Tasks"
        ]
      }
    },
    "/v1/comments": {
      "get": {
        "description": "Retrieve all comments for a specific entity (task, policy, vendor, etc.)",
        "operationId": "CommentsController_getComments_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "required": true,
            "in": "query",
            "description": "ID of the entity to get comments for",
            "schema": {
              "example": "tsk_abc123def456",
              "type": "string"
            }
          },
          {
            "name": "entityType",
            "required": true,
            "in": "query",
            "description": "Type of entity",
            "schema": {
              "enum": [
                "task",
                "vendor",
                "risk",
                "policy"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CommentResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Get comments for an entity",
        "tags": [
          "Comments"
        ]
      },
      "post": {
        "description": "Create a comment on an entity with optional file attachments",
        "operationId": "CommentsController_createComment_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Comment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Create a new comment",
        "tags": [
          "Comments"
        ]
      }
    },
    "/v1/comments/{commentId}": {
      "put": {
        "description": "Update the content of an existing comment (author only)",
        "operationId": "CommentsController_updateComment_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "description": "Unique comment identifier",
            "schema": {
              "example": "cmt_abc123def456",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCommentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Update a comment",
        "tags": [
          "Comments"
        ]
      },
      "delete": {
        "description": "Delete a comment and all its attachments (author only)",
        "operationId": "CommentsController_deleteComment_v1",
        "parameters": [
          {
            "name": "X-Organization-Id",
            "in": "header",
            "description": "Organization ID (required for session auth, optional for API key auth)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "description": "Unique comment identifier",
            "schema": {
              "example": "cmt_abc123def456",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "deletedCommentId": {
                      "type": "string",
                      "example": "cmt_abc123def456"
                    },
                    "message": {
                      "type": "string",
                      "example": "Comment deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid authentication",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Comment not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Comment with ID cmt_abc123def456 not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          }
        ],
        "summary": "Delete a comment",
        "tags": [
          "Comments"
        ]
      }
    },
    "/v1/health": {
      "get": {
        "description": "Returns the health status of the API",
        "operationId": "HealthController_getHealth_v1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "API is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "uptime": {
                      "type": "number",
                      "description": "Process uptime in seconds"
                    },
                    "version": {
                      "type": "string",
                      "example": "1.0.0"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Health check",
        "tags": [
          "Health"
        ]
      }
    }
  },
  "info": {
    "title": "API Documentation",
    "description": "The API documentation for this application",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [
    {
      "url": "http://localhost:3333",
      "description": "API Server"
    }
  ],
  "components": {
    "securitySchemes": {
      "apikey": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key for authentication"
      }
    },
    "schemas": {
      "UserResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID",
            "example": "usr_abc123def456"
          },
          "name": {
            "type": "string",
            "description": "User name",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "User email",
            "example": "john.doe@company.com"
          },
          "emailVerified": {
            "type": "boolean",
            "description": "Whether email is verified",
            "example": true
          },
          "image": {
            "type": "object",
            "description": "User profile image URL",
            "example": "https://example.com/avatar.jpg",
            "nullable": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the user was created",
            "example": "2024-01-01T00:00:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the user was last updated",
            "example": "2024-01-15T00:00:00Z"
          },
          "lastLogin": {
            "type": "object",
            "description": "Last login time",
            "example": "2024-01-15T12:00:00Z",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "emailVerified",
          "image",
          "createdAt",
          "updatedAt",
          "lastLogin"
        ]
      },
      "PeopleResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Member ID",
            "example": "mem_abc123def456"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID this member belongs to",
            "example": "org_abc123def456"
          },
          "userId": {
            "type": "string",
            "description": "User ID associated with member",
            "example": "usr_abc123def456"
          },
          "role": {
            "type": "string",
            "description": "Member role",
            "example": "admin"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the member was created",
            "example": "2024-01-01T00:00:00Z"
          },
          "department": {
            "type": "string",
            "description": "Member department",
            "enum": [
              "none",
              "admin",
              "gov",
              "hr",
              "it",
              "itsm",
              "qms"
            ],
            "example": "it"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether member is active",
            "example": true
          },
          "fleetDmLabelId": {
            "type": "object",
            "description": "FleetDM label ID for member devices",
            "example": 123,
            "nullable": true
          },
          "user": {
            "description": "User information",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserResponseDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "organizationId",
          "userId",
          "role",
          "createdAt",
          "department",
          "isActive",
          "fleetDmLabelId",
          "user"
        ]
      },
      "CreatePeopleDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID to associate with this member",
            "example": "usr_abc123def456"
          },
          "role": {
            "type": "string",
            "description": "Role for the member",
            "example": "admin"
          },
          "department": {
            "type": "string",
            "description": "Member department",
            "enum": [
              "none",
              "admin",
              "gov",
              "hr",
              "it",
              "itsm",
              "qms"
            ],
            "example": "it"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether member is active",
            "example": true
          },
          "fleetDmLabelId": {
            "type": "number",
            "description": "FleetDM label ID for member devices",
            "example": 123
          }
        },
        "required": [
          "userId",
          "role"
        ]
      },
      "BulkCreatePeopleDto": {
        "type": "object",
        "properties": {
          "members": {
            "description": "Array of members to create",
            "example": [
              {
                "userId": "usr_abc123def456",
                "role": "admin",
                "department": "it",
                "isActive": true,
                "fleetDmLabelId": 123
              },
              {
                "userId": "usr_def456ghi789",
                "role": "member",
                "department": "hr",
                "isActive": true
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePeopleDto"
            }
          }
        },
        "required": [
          "members"
        ]
      },
      "UpdatePeopleDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID to associate with this member",
            "example": "usr_abc123def456"
          },
          "role": {
            "type": "string",
            "description": "Role for the member",
            "example": "admin"
          },
          "department": {
            "type": "string",
            "description": "Member department",
            "enum": [
              "none",
              "admin",
              "gov",
              "hr",
              "it",
              "itsm",
              "qms"
            ],
            "example": "it"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether to deactivate this member (soft delete)",
            "example": false
          },
          "fleetDmLabelId": {
            "type": "number",
            "description": "FleetDM label ID for member devices",
            "example": 123
          }
        }
      },
      "CreateRiskDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Risk title",
            "example": "Data breach vulnerability in user authentication system"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the risk",
            "example": "Weak password requirements could lead to unauthorized access to user accounts"
          },
          "category": {
            "type": "string",
            "description": "Risk category",
            "enum": [
              "customer",
              "governance",
              "operations",
              "other",
              "people",
              "regulatory",
              "reporting",
              "resilience",
              "technology",
              "vendor_management"
            ],
            "example": "technology"
          },
          "department": {
            "type": "string",
            "description": "Department responsible for the risk",
            "enum": [
              "none",
              "admin",
              "gov",
              "hr",
              "it",
              "itsm",
              "qms"
            ],
            "example": "it"
          },
          "status": {
            "type": "string",
            "description": "Current status of the risk",
            "enum": [
              "open",
              "pending",
              "closed",
              "archived"
            ],
            "default": "open",
            "example": "open"
          },
          "likelihood": {
            "type": "string",
            "description": "Likelihood of the risk occurring",
            "enum": [
              "very_unlikely",
              "unlikely",
              "possible",
              "likely",
              "very_likely"
            ],
            "default": "very_unlikely",
            "example": "possible"
          },
          "impact": {
            "type": "string",
            "description": "Impact if the risk materializes",
            "enum": [
              "insignificant",
              "minor",
              "moderate",
              "major",
              "severe"
            ],
            "default": "insignificant",
            "example": "major"
          },
          "residualLikelihood": {
            "type": "string",
            "description": "Residual likelihood after treatment",
            "enum": [
              "very_unlikely",
              "unlikely",
              "possible",
              "likely",
              "very_likely"
            ],
            "default": "very_unlikely",
            "example": "unlikely"
          },
          "residualImpact": {
            "type": "string",
            "description": "Residual impact after treatment",
            "enum": [
              "insignificant",
              "minor",
              "moderate",
              "major",
              "severe"
            ],
            "default": "insignificant",
            "example": "minor"
          },
          "treatmentStrategyDescription": {
            "type": "string",
            "description": "Description of the treatment strategy",
            "example": "Implement multi-factor authentication and strengthen password requirements"
          },
          "treatmentStrategy": {
            "type": "string",
            "description": "Risk treatment strategy",
            "enum": [
              "accept",
              "avoid",
              "mitigate",
              "transfer"
            ],
            "default": "accept",
            "example": "mitigate"
          },
          "assigneeId": {
            "type": "string",
            "description": "ID of the user assigned to this risk",
            "example": "mem_abc123def456"
          }
        },
        "required": [
          "title",
          "description",
          "category",
          "status",
          "likelihood",
          "impact",
          "residualLikelihood",
          "residualImpact",
          "treatmentStrategy"
        ]
      },
      "UpdateRiskDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Risk title",
            "example": "Data breach vulnerability in user authentication system"
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the risk",
            "example": "Weak password requirements could lead to unauthorized access to user accounts"
          },
          "category": {
            "type": "string",
            "description": "Risk category",
            "enum": [
              "customer",
              "governance",
              "operations",
              "other",
              "people",
              "regulatory",
              "reporting",
              "resilience",
              "technology",
              "vendor_management"
            ],
            "example": "technology"
          },
          "department": {
            "type": "string",
            "description": "Department responsible for the risk",
            "enum": [
              "none",
              "admin",
              "gov",
              "hr",
              "it",
              "itsm",
              "qms"
            ],
            "example": "it"
          },
          "status": {
            "type": "string",
            "description": "Current status of the risk",
            "enum": [
              "open",
              "pending",
              "closed",
              "archived"
            ],
            "default": "open",
            "example": "open"
          },
          "likelihood": {
            "type": "string",
            "description": "Likelihood of the risk occurring",
            "enum": [
              "very_unlikely",
              "unlikely",
              "possible",
              "likely",
              "very_likely"
            ],
            "default": "very_unlikely",
            "example": "possible"
          },
          "impact": {
            "type": "string",
            "description": "Impact if the risk materializes",
            "enum": [
              "insignificant",
              "minor",
              "moderate",
              "major",
              "severe"
            ],
            "default": "insignificant",
            "example": "major"
          },
          "residualLikelihood": {
            "type": "string",
            "description": "Residual likelihood after treatment",
            "enum": [
              "very_unlikely",
              "unlikely",
              "possible",
              "likely",
              "very_likely"
            ],
            "default": "very_unlikely",
            "example": "unlikely"
          },
          "residualImpact": {
            "type": "string",
            "description": "Residual impact after treatment",
            "enum": [
              "insignificant",
              "minor",
              "moderate",
              "major",
              "severe"
            ],
            "default": "insignificant",
            "example": "minor"
          },
          "treatmentStrategyDescription": {
            "type": "string",
            "description": "Description of the treatment strategy",
            "example": "Implement multi-factor authentication and strengthen password requirements"
          },
          "treatmentStrategy": {
            "type": "string",
            "description": "Risk treatment strategy",
            "enum": [
              "accept",
              "avoid",
              "mitigate",
              "transfer"
            ],
            "default": "accept",
            "example": "mitigate"
          },
          "assigneeId": {
            "type": "string",
            "description": "ID of the user assigned to this risk",
            "example": "mem_abc123def456"
          }
        }
      },
      "CreateVendorDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Vendor name",
            "example": "CloudTech Solutions Inc."
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the vendor and services provided",
            "example": "Cloud infrastructure provider offering AWS-like services including compute, storage, and networking solutions for enterprise customers."
          },
          "category": {
            "type": "string",
            "description": "Vendor category",
            "enum": [
              "cloud",
              "infrastructure",
              "software_as_a_service",
              "finance",
              "marketing",
              "sales",
              "hr",
              "other"
            ],
            "default": "other",
            "example": "cloud"
          },
          "status": {
            "type": "string",
            "description": "Assessment status of the vendor",
            "enum": [
              "not_assessed",
              "in_progress",
              "assessed"
            ],
            "default": "not_assessed",
            "example": "not_assessed"
          },
          "inherentProbability": {
            "type": "string",
            "description": "Inherent probability of risk before controls",
            "enum": [
              "very_unlikely",
              "unlikely",
              "possible",
              "likely",
              "very_likely"
            ],
            "default": "very_unlikely",
            "example": "possible"
          },
          "inherentImpact": {
            "type": "string",
            "description": "Inherent impact of risk before controls",
            "enum": [
              "insignificant",
              "minor",
              "moderate",
              "major",
              "severe"
            ],
            "default": "insignificant",
            "example": "moderate"
          },
          "residualProbability": {
            "type": "string",
            "description": "Residual probability after controls are applied",
            "enum": [
              "very_unlikely",
              "unlikely",
              "possible",
              "likely",
              "very_likely"
            ],
            "default": "very_unlikely",
            "example": "unlikely"
          },
          "residualImpact": {
            "type": "string",
            "description": "Residual impact after controls are applied",
            "enum": [
              "insignificant",
              "minor",
              "moderate",
              "major",
              "severe"
            ],
            "default": "insignificant",
            "example": "minor"
          },
          "website": {
            "type": "string",
            "description": "Vendor website URL",
            "example": "https://www.cloudtechsolutions.com"
          },
          "assigneeId": {
            "type": "string",
            "description": "ID of the user assigned to manage this vendor",
            "example": "mem_abc123def456"
          }
        },
        "required": [
          "name",
          "description",
          "category",
          "status",
          "inherentProbability",
          "inherentImpact",
          "residualProbability",
          "residualImpact"
        ]
      },
      "UpdateVendorDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Vendor name",
            "example": "CloudTech Solutions Inc."
          },
          "description": {
            "type": "string",
            "description": "Detailed description of the vendor and services provided",
            "example": "Cloud infrastructure provider offering AWS-like services including compute, storage, and networking solutions for enterprise customers."
          },
          "category": {
            "type": "string",
            "description": "Vendor category",
            "enum": [
              "cloud",
              "infrastructure",
              "software_as_a_service",
              "finance",
              "marketing",
              "sales",
              "hr",
              "other"
            ],
            "default": "other",
            "example": "cloud"
          },
          "status": {
            "type": "string",
            "description": "Assessment status of the vendor",
            "enum": [
              "not_assessed",
              "in_progress",
              "assessed"
            ],
            "default": "not_assessed",
            "example": "not_assessed"
          },
          "inherentProbability": {
            "type": "string",
            "description": "Inherent probability of risk before controls",
            "enum": [
              "very_unlikely",
              "unlikely",
              "possible",
              "likely",
              "very_likely"
            ],
            "default": "very_unlikely",
            "example": "possible"
          },
          "inherentImpact": {
            "type": "string",
            "description": "Inherent impact of risk before controls",
            "enum": [
              "insignificant",
              "minor",
              "moderate",
              "major",
              "severe"
            ],
            "default": "insignificant",
            "example": "moderate"
          },
          "residualProbability": {
            "type": "string",
            "description": "Residual probability after controls are applied",
            "enum": [
              "very_unlikely",
              "unlikely",
              "possible",
              "likely",
              "very_likely"
            ],
            "default": "very_unlikely",
            "example": "unlikely"
          },
          "residualImpact": {
            "type": "string",
            "description": "Residual impact after controls are applied",
            "enum": [
              "insignificant",
              "minor",
              "moderate",
              "major",
              "severe"
            ],
            "default": "insignificant",
            "example": "minor"
          },
          "website": {
            "type": "string",
            "description": "Vendor website URL",
            "example": "https://www.cloudtechsolutions.com"
          },
          "assigneeId": {
            "type": "string",
            "description": "ID of the user assigned to manage this vendor",
            "example": "mem_abc123def456"
          }
        }
      },
      "CreateContextDto": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "description": "The question or topic this context entry addresses",
            "example": "How do we handle user authentication in our application?"
          },
          "answer": {
            "type": "string",
            "description": "The answer or detailed explanation for the question",
            "example": "We use a hybrid authentication system supporting both API keys and session-based authentication. API keys are used for programmatic access while sessions are used for web interface interactions."
          },
          "tags": {
            "description": "Tags to categorize and help search this context entry",
            "example": [
              "authentication",
              "security",
              "api",
              "sessions"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "question",
          "answer"
        ]
      },
      "UpdateContextDto": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "description": "The question or topic this context entry addresses",
            "example": "How do we handle user authentication in our application?"
          },
          "answer": {
            "type": "string",
            "description": "The answer or detailed explanation for the question",
            "example": "We use a hybrid authentication system supporting both API keys and session-based authentication. API keys are used for programmatic access while sessions are used for web interface interactions."
          },
          "tags": {
            "description": "Tags to categorize and help search this context entry",
            "example": [
              "authentication",
              "security",
              "api",
              "sessions"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FleetPolicyDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Policy ID",
            "example": 123
          },
          "name": {
            "type": "string",
            "description": "Policy name",
            "example": "Password Policy"
          },
          "query": {
            "type": "string",
            "description": "Policy query",
            "example": "SELECT * FROM users;"
          },
          "critical": {
            "type": "boolean",
            "description": "Whether policy is critical",
            "example": true
          },
          "description": {
            "type": "string",
            "description": "Policy description",
            "example": "Ensures strong passwords"
          },
          "author_id": {
            "type": "number",
            "description": "Author ID",
            "example": 456
          },
          "author_name": {
            "type": "string",
            "description": "Author name",
            "example": "John Doe"
          },
          "author_email": {
            "type": "string",
            "description": "Author email",
            "example": "john@example.com"
          },
          "team_id": {
            "type": "object",
            "description": "Team ID",
            "example": 789,
            "nullable": true
          },
          "resolution": {
            "type": "string",
            "description": "Policy resolution",
            "example": "Update password settings"
          },
          "platform": {
            "type": "string",
            "description": "Platform",
            "example": "darwin"
          },
          "calendar_events_enabled": {
            "type": "boolean",
            "description": "Calendar events enabled",
            "example": false
          },
          "created_at": {
            "type": "string",
            "description": "Created at",
            "example": "2024-01-01T00:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Updated at",
            "example": "2024-01-15T00:00:00Z"
          },
          "response": {
            "type": "string",
            "description": "Policy response",
            "example": "compliant"
          }
        },
        "required": [
          "id",
          "name",
          "query",
          "critical",
          "description",
          "author_id",
          "author_name",
          "author_email",
          "team_id",
          "resolution",
          "platform",
          "calendar_events_enabled",
          "created_at",
          "updated_at",
          "response"
        ]
      },
      "DeviceResponseDto": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "Device created at",
            "example": "2024-01-01T00:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Device updated at",
            "example": "2024-01-15T00:00:00Z"
          },
          "software": {
            "type": "array",
            "description": "Software list",
            "items": {
              "type": "object"
            }
          },
          "software_updated_at": {
            "type": "string",
            "description": "Software updated at",
            "example": "2024-01-10T00:00:00Z"
          },
          "id": {
            "type": "number",
            "description": "Device ID",
            "example": 123
          },
          "detail_updated_at": {
            "type": "string",
            "description": "Detail updated at",
            "example": "2024-01-10T00:00:00Z"
          },
          "label_updated_at": {
            "type": "string",
            "description": "Label updated at",
            "example": "2024-01-10T00:00:00Z"
          },
          "policy_updated_at": {
            "type": "string",
            "description": "Policy updated at",
            "example": "2024-01-10T00:00:00Z"
          },
          "last_enrolled_at": {
            "type": "string",
            "description": "Last enrolled at",
            "example": "2024-01-01T00:00:00Z"
          },
          "seen_time": {
            "type": "string",
            "description": "Last seen time",
            "example": "2024-01-15T12:00:00Z"
          },
          "refetch_requested": {
            "type": "boolean",
            "description": "Refetch requested",
            "example": false
          },
          "hostname": {
            "type": "string",
            "description": "Hostname",
            "example": "johns-macbook"
          },
          "uuid": {
            "type": "string",
            "description": "Device UUID",
            "example": "abc123def456"
          },
          "platform": {
            "type": "string",
            "description": "Platform",
            "example": "darwin"
          },
          "osquery_version": {
            "type": "string",
            "description": "Osquery version",
            "example": "5.10.2"
          },
          "orbit_version": {
            "type": "string",
            "description": "Orbit version",
            "example": "1.19.0"
          },
          "fleet_desktop_version": {
            "type": "string",
            "description": "Fleet desktop version",
            "example": "1.19.0"
          },
          "scripts_enabled": {
            "type": "boolean",
            "description": "Scripts enabled",
            "example": true
          },
          "os_version": {
            "type": "string",
            "description": "OS version",
            "example": "macOS 14.2.1"
          },
          "build": {
            "type": "string",
            "description": "Build",
            "example": "23C71"
          },
          "platform_like": {
            "type": "string",
            "description": "Platform like",
            "example": "darwin"
          },
          "code_name": {
            "type": "string",
            "description": "Code name",
            "example": "sonoma"
          },
          "uptime": {
            "type": "number",
            "description": "Uptime in seconds",
            "example": 86400
          },
          "memory": {
            "type": "number",
            "description": "Memory in bytes",
            "example": 17179869184
          },
          "cpu_type": {
            "type": "string",
            "description": "CPU type",
            "example": "x86_64"
          },
          "cpu_subtype": {
            "type": "string",
            "description": "CPU subtype",
            "example": "x86_64h"
          },
          "cpu_brand": {
            "type": "string",
            "description": "CPU brand",
            "example": "Intel(R) Core(TM) i7-9750H"
          },
          "cpu_physical_cores": {
            "type": "number",
            "description": "CPU physical cores",
            "example": 6
          },
          "cpu_logical_cores": {
            "type": "number",
            "description": "CPU logical cores",
            "example": 12
          },
          "hardware_vendor": {
            "type": "string",
            "description": "Hardware vendor",
            "example": "Apple Inc."
          },
          "hardware_model": {
            "type": "string",
            "description": "Hardware model",
            "example": "MacBookPro16,1"
          },
          "hardware_version": {
            "type": "string",
            "description": "Hardware version",
            "example": "1.0"
          },
          "hardware_serial": {
            "type": "string",
            "description": "Hardware serial",
            "example": "C02XW0AAJGH6"
          },
          "computer_name": {
            "type": "string",
            "description": "Computer name",
            "example": "John's MacBook Pro"
          },
          "public_ip": {
            "type": "string",
            "description": "Public IP",
            "example": "203.0.113.1"
          },
          "primary_ip": {
            "type": "string",
            "description": "Primary IP",
            "example": "192.168.1.100"
          },
          "primary_mac": {
            "type": "string",
            "description": "Primary MAC",
            "example": "00:11:22:33:44:55"
          },
          "distributed_interval": {
            "type": "number",
            "description": "Distributed interval",
            "example": 10
          },
          "config_tls_refresh": {
            "type": "number",
            "description": "Config TLS refresh",
            "example": 3600
          },
          "logger_tls_period": {
            "type": "number",
            "description": "Logger TLS period",
            "example": 300
          },
          "team_id": {
            "type": "object",
            "description": "Team ID",
            "example": 1,
            "nullable": true
          },
          "pack_stats": {
            "type": "array",
            "description": "Pack stats",
            "items": {
              "type": "object"
            }
          },
          "team_name": {
            "type": "object",
            "description": "Team name",
            "example": "Engineering",
            "nullable": true
          },
          "users": {
            "type": "array",
            "description": "Users",
            "items": {
              "type": "object"
            }
          },
          "gigs_disk_space_available": {
            "type": "number",
            "description": "Disk space available in GB",
            "example": 250.5
          },
          "percent_disk_space_available": {
            "type": "number",
            "description": "Percent disk space available",
            "example": 75.2
          },
          "gigs_total_disk_space": {
            "type": "number",
            "description": "Total disk space in GB",
            "example": 500
          },
          "disk_encryption_enabled": {
            "type": "boolean",
            "description": "Disk encryption enabled",
            "example": true
          },
          "issues": {
            "type": "object",
            "description": "Issues",
            "additionalProperties": true
          },
          "mdm": {
            "type": "object",
            "description": "MDM info",
            "additionalProperties": true
          },
          "refetch_critical_queries_until": {
            "type": "object",
            "description": "Refetch critical queries until",
            "example": "2024-01-20T00:00:00Z",
            "nullable": true
          },
          "last_restarted_at": {
            "type": "string",
            "description": "Last restarted at",
            "example": "2024-01-10T08:00:00Z"
          },
          "policies": {
            "description": "Policies",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FleetPolicyDto"
            }
          },
          "labels": {
            "type": "array",
            "description": "Labels",
            "items": {
              "type": "object"
            }
          },
          "packs": {
            "type": "array",
            "description": "Packs",
            "items": {
              "type": "object"
            }
          },
          "batteries": {
            "type": "array",
            "description": "Batteries",
            "items": {
              "type": "object"
            }
          },
          "end_users": {
            "type": "array",
            "description": "End users",
            "items": {
              "type": "object"
            }
          },
          "last_mdm_enrolled_at": {
            "type": "string",
            "description": "Last MDM enrolled at",
            "example": "2024-01-01T00:00:00Z"
          },
          "last_mdm_checked_in_at": {
            "type": "string",
            "description": "Last MDM checked in at",
            "example": "2024-01-15T12:00:00Z"
          },
          "status": {
            "type": "string",
            "description": "Device status",
            "example": "online"
          },
          "display_text": {
            "type": "string",
            "description": "Display text",
            "example": "Johns MacBook Pro"
          },
          "display_name": {
            "type": "string",
            "description": "Display name",
            "example": "John's MacBook Pro"
          }
        },
        "required": [
          "created_at",
          "updated_at",
          "software",
          "software_updated_at",
          "id",
          "detail_updated_at",
          "label_updated_at",
          "policy_updated_at",
          "last_enrolled_at",
          "seen_time",
          "refetch_requested",
          "hostname",
          "uuid",
          "platform",
          "osquery_version",
          "orbit_version",
          "fleet_desktop_version",
          "scripts_enabled",
          "os_version",
          "build",
          "platform_like",
          "code_name",
          "uptime",
          "memory",
          "cpu_type",
          "cpu_subtype",
          "cpu_brand",
          "cpu_physical_cores",
          "cpu_logical_cores",
          "hardware_vendor",
          "hardware_model",
          "hardware_version",
          "hardware_serial",
          "computer_name",
          "public_ip",
          "primary_ip",
          "primary_mac",
          "distributed_interval",
          "config_tls_refresh",
          "logger_tls_period",
          "team_id",
          "pack_stats",
          "team_name",
          "users",
          "gigs_disk_space_available",
          "percent_disk_space_available",
          "gigs_total_disk_space",
          "disk_encryption_enabled",
          "issues",
          "mdm",
          "refetch_critical_queries_until",
          "last_restarted_at",
          "policies",
          "labels",
          "packs",
          "batteries",
          "end_users",
          "last_mdm_enrolled_at",
          "last_mdm_checked_in_at",
          "status",
          "display_text",
          "display_name"
        ]
      },
      "MemberResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Member ID",
            "example": "mem_abc123def456"
          },
          "userId": {
            "type": "string",
            "description": "User ID associated with member",
            "example": "usr_abc123def456"
          },
          "role": {
            "type": "string",
            "description": "Member role",
            "example": "admin"
          },
          "department": {
            "type": "object",
            "description": "Member department",
            "example": "engineering",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether member is active",
            "example": true
          },
          "fleetDmLabelId": {
            "type": "object",
            "description": "FleetDM label ID for member devices",
            "example": 123,
            "nullable": true
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID this member belongs to",
            "example": "org_abc123def456"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the member was created",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "required": [
          "id",
          "userId",
          "role",
          "department",
          "isActive",
          "fleetDmLabelId",
          "organizationId",
          "createdAt"
        ]
      },
      "DevicesByMemberResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of devices assigned to the member",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceResponseDto"
            }
          },
          "count": {
            "type": "number",
            "description": "Total number of devices for this member",
            "example": 3
          },
          "member": {
            "description": "Member information",
            "allOf": [
              {
                "$ref": "#/components/schemas/MemberResponseDto"
              }
            ]
          },
          "authType": {
            "type": "string",
            "description": "How the request was authenticated",
            "enum": [
              "api-key",
              "session"
            ],
            "example": "api-key"
          },
          "authenticatedUser": {
            "type": "object",
            "description": "Authenticated user information (present for session auth)",
            "example": {
              "id": "usr_abc123def456",
              "email": "user@company.com"
            }
          }
        },
        "required": [
          "data",
          "count",
          "member",
          "authType"
        ]
      },
      "PolicyResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The policy ID",
            "example": "pol_abc123def456"
          },
          "name": {
            "type": "string",
            "description": "Name of the policy",
            "example": "Data Privacy Policy"
          },
          "description": {
            "type": "string",
            "description": "Description of the policy",
            "example": "This policy outlines how we handle and protect personal data",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Status of the policy",
            "enum": [
              "draft",
              "published",
              "needs_review"
            ],
            "example": "draft"
          },
          "content": {
            "type": "array",
            "description": "Content of the policy as TipTap JSON (array of nodes)",
            "example": [
              {
                "type": "heading",
                "attrs": {
                  "level": 2,
                  "textAlign": null
                },
                "content": [
                  {
                    "type": "text",
                    "text": "Purpose"
                  }
                ]
              },
              {
                "type": "paragraph",
                "attrs": {
                  "textAlign": null
                },
                "content": [
                  {
                    "type": "text",
                    "text": "Verify workforce integrity and grant the right access at start, revoke at end."
                  }
                ]
              }
            ],
            "items": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "frequency": {
            "type": "string",
            "description": "Review frequency of the policy",
            "enum": [
              "monthly",
              "quarterly",
              "yearly"
            ],
            "example": "yearly",
            "nullable": true
          },
          "department": {
            "type": "string",
            "description": "Department this policy applies to",
            "enum": [
              "none",
              "admin",
              "gov",
              "hr",
              "it",
              "itsm",
              "qms"
            ],
            "example": "it",
            "nullable": true
          },
          "isRequiredToSign": {
            "type": "boolean",
            "description": "Whether this policy requires a signature",
            "example": true
          },
          "signedBy": {
            "type": "array",
            "description": "List of user IDs who have signed this policy",
            "example": [
              "usr_123",
              "usr_456"
            ],
            "items": {
              "type": "string"
            }
          },
          "reviewDate": {
            "format": "date-time",
            "type": "string",
            "description": "Review date for the policy",
            "example": "2024-12-31T00:00:00.000Z",
            "nullable": true
          },
          "isArchived": {
            "type": "boolean",
            "description": "Whether this policy is archived",
            "example": false
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the policy was created",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the policy was last updated",
            "example": "2024-01-15T00:00:00.000Z"
          },
          "lastArchivedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the policy was last archived",
            "example": "2024-02-01T00:00:00.000Z",
            "nullable": true
          },
          "lastPublishedAt": {
            "format": "date-time",
            "type": "string",
            "description": "When the policy was last published",
            "example": "2024-01-10T00:00:00.000Z",
            "nullable": true
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID this policy belongs to",
            "example": "org_abc123def456"
          },
          "assigneeId": {
            "type": "string",
            "description": "ID of the user assigned to this policy",
            "example": "usr_abc123def456",
            "nullable": true
          },
          "approverId": {
            "type": "string",
            "description": "ID of the user who approved this policy",
            "example": "usr_xyz789abc123",
            "nullable": true
          },
          "policyTemplateId": {
            "type": "string",
            "description": "ID of the policy template this policy is based on",
            "example": "plt_template123",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "status",
          "content",
          "frequency",
          "department",
          "isRequiredToSign",
          "signedBy",
          "reviewDate",
          "isArchived",
          "createdAt",
          "updatedAt",
          "lastArchivedAt",
          "lastPublishedAt",
          "organizationId",
          "assigneeId",
          "approverId",
          "policyTemplateId"
        ]
      },
      "CreatePolicyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the policy",
            "example": "Data Privacy Policy"
          },
          "description": {
            "type": "string",
            "description": "Description of the policy",
            "example": "This policy outlines how we handle and protect personal data"
          },
          "status": {
            "type": "string",
            "description": "Status of the policy",
            "enum": [
              "draft",
              "published",
              "needs_review"
            ],
            "example": "draft"
          },
          "content": {
            "type": "array",
            "description": "Content of the policy as TipTap JSON (array of nodes)",
            "example": [
              {
                "type": "heading",
                "attrs": {
                  "level": 2,
                  "textAlign": null
                },
                "content": [
                  {
                    "type": "text",
                    "text": "Purpose"
                  }
                ]
              },
              {
                "type": "paragraph",
                "attrs": {
                  "textAlign": null
                },
                "content": [
                  {
                    "type": "text",
                    "text": "Verify workforce integrity and grant the right access at start, revoke at end."
                  }
                ]
              }
            ],
            "items": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "frequency": {
            "type": "string",
            "description": "Review frequency of the policy",
            "enum": [
              "monthly",
              "quarterly",
              "yearly"
            ],
            "example": "yearly"
          },
          "department": {
            "type": "string",
            "description": "Department this policy applies to",
            "enum": [
              "none",
              "admin",
              "gov",
              "hr",
              "it",
              "itsm",
              "qms"
            ],
            "example": "it"
          },
          "isRequiredToSign": {
            "type": "boolean",
            "description": "Whether this policy requires a signature",
            "example": true
          },
          "reviewDate": {
            "type": "string",
            "description": "Review date for the policy",
            "example": "2024-12-31T00:00:00.000Z"
          },
          "assigneeId": {
            "type": "string",
            "description": "ID of the user assigned to this policy",
            "example": "usr_abc123def456"
          },
          "approverId": {
            "type": "string",
            "description": "ID of the user who approved this policy",
            "example": "usr_xyz789abc123"
          },
          "policyTemplateId": {
            "type": "string",
            "description": "ID of the policy template this policy is based on",
            "example": "plt_template123"
          },
          "signedBy": {
            "type": "array",
            "description": "List of user IDs who have signed this policy",
            "example": [
              "usr_123",
              "usr_456"
            ],
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "content"
        ]
      },
      "UpdatePolicyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the policy",
            "example": "Data Privacy Policy"
          },
          "description": {
            "type": "string",
            "description": "Description of the policy",
            "example": "This policy outlines how we handle and protect personal data"
          },
          "status": {
            "type": "string",
            "description": "Status of the policy",
            "enum": [
              "draft",
              "published",
              "needs_review"
            ],
            "example": "draft"
          },
          "content": {
            "type": "array",
            "description": "Content of the policy as TipTap JSON (array of nodes)",
            "example": [
              {
                "type": "heading",
                "attrs": {
                  "level": 2,
                  "textAlign": null
                },
                "content": [
                  {
                    "type": "text",
                    "text": "Purpose"
                  }
                ]
              },
              {
                "type": "paragraph",
                "attrs": {
                  "textAlign": null
                },
                "content": [
                  {
                    "type": "text",
                    "text": "Verify workforce integrity and grant the right access at start, revoke at end."
                  }
                ]
              }
            ],
            "items": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "frequency": {
            "type": "string",
            "description": "Review frequency of the policy",
            "enum": [
              "monthly",
              "quarterly",
              "yearly"
            ],
            "example": "yearly"
          },
          "department": {
            "type": "string",
            "description": "Department this policy applies to",
            "enum": [
              "none",
              "admin",
              "gov",
              "hr",
              "it",
              "itsm",
              "qms"
            ],
            "example": "it"
          },
          "isRequiredToSign": {
            "type": "boolean",
            "description": "Whether this policy requires a signature",
            "example": true
          },
          "reviewDate": {
            "type": "string",
            "description": "Review date for the policy",
            "example": "2024-12-31T00:00:00.000Z"
          },
          "assigneeId": {
            "type": "string",
            "description": "ID of the user assigned to this policy",
            "example": "usr_abc123def456"
          },
          "approverId": {
            "type": "string",
            "description": "ID of the user who approved this policy",
            "example": "usr_xyz789abc123"
          },
          "policyTemplateId": {
            "type": "string",
            "description": "ID of the policy template this policy is based on",
            "example": "plt_template123"
          },
          "signedBy": {
            "type": "array",
            "description": "List of user IDs who have signed this policy",
            "example": [
              "usr_123",
              "usr_456"
            ],
            "items": {
              "type": "string"
            }
          },
          "isArchived": {
            "type": "boolean",
            "description": "Whether to archive this policy",
            "example": false
          }
        }
      },
      "TaskResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the task",
            "example": "tsk_abc123def456"
          },
          "title": {
            "type": "string",
            "description": "Task title",
            "example": "Implement user authentication"
          },
          "description": {
            "type": "string",
            "description": "Task description",
            "example": "Add OAuth 2.0 authentication to the platform"
          },
          "status": {
            "type": "string",
            "description": "Task status",
            "example": "in_progress",
            "enum": [
              "todo",
              "in_progress",
              "done",
              "blocked"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Task creation timestamp",
            "example": "2024-01-15T10:30:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Task last update timestamp",
            "example": "2024-01-15T10:30:00Z"
          }
        },
        "required": [
          "id",
          "title",
          "status",
          "createdAt",
          "updatedAt"
        ]
      },
      "AttachmentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the attachment",
            "example": "att_abc123def456"
          },
          "name": {
            "type": "string",
            "description": "Original filename",
            "example": "document.pdf"
          },
          "type": {
            "type": "string",
            "description": "File type/MIME type",
            "example": "application/pdf"
          },
          "size": {
            "type": "number",
            "description": "File size in bytes",
            "example": 1024000
          },
          "downloadUrl": {
            "type": "string",
            "description": "Signed URL for downloading the file (temporary)",
            "example": "https://bucket.s3.amazonaws.com/path/to/file.pdf?signature=..."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Upload timestamp",
            "example": "2024-01-15T10:30:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "size",
          "downloadUrl",
          "createdAt"
        ]
      },
      "UploadAttachmentDto": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "Name of the file",
            "example": "document.pdf",
            "maxLength": 255
          },
          "fileType": {
            "type": "string",
            "description": "MIME type of the file",
            "example": "application/pdf",
            "enum": [
              "image/jpeg",
              "image/png",
              "image/gif",
              "image/webp",
              "application/pdf",
              "text/plain",
              "application/msword",
              "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            ]
          },
          "fileData": {
            "type": "string",
            "description": "Base64 encoded file data",
            "example": "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg=="
          },
          "description": {
            "type": "string",
            "description": "Description of the attachment",
            "example": "Meeting notes from Q4 planning session",
            "maxLength": 500
          }
        },
        "required": [
          "fileName",
          "fileType",
          "fileData"
        ]
      },
      "AuthorResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User ID",
            "example": "usr_abc123def456"
          },
          "name": {
            "type": "string",
            "description": "User name",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "User email",
            "example": "john.doe@company.com"
          }
        },
        "required": [
          "id",
          "name",
          "email"
        ]
      },
      "AttachmentMetadataDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the attachment",
            "example": "att_abc123def456"
          },
          "name": {
            "type": "string",
            "description": "Original filename",
            "example": "document.pdf"
          },
          "type": {
            "type": "string",
            "description": "File type/MIME type",
            "example": "application/pdf"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Upload timestamp",
            "example": "2024-01-15T10:30:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "createdAt"
        ]
      },
      "CommentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the comment",
            "example": "cmt_abc123def456"
          },
          "content": {
            "type": "string",
            "description": "Comment content",
            "example": "This task needs to be completed by end of week"
          },
          "author": {
            "description": "Comment author information",
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorResponseDto"
              }
            ]
          },
          "attachments": {
            "description": "Attachment metadata (URLs generated on-demand)",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentMetadataDto"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Comment creation timestamp",
            "example": "2024-01-15T10:30:00Z"
          }
        },
        "required": [
          "id",
          "content",
          "author",
          "attachments",
          "createdAt"
        ]
      },
      "CreateCommentDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Content of the comment",
            "example": "This task needs to be completed by end of week",
            "maxLength": 2000
          },
          "entityId": {
            "type": "string",
            "description": "ID of the entity to comment on",
            "example": "tsk_abc123def456"
          },
          "entityType": {
            "type": "string",
            "description": "Type of entity being commented on",
            "enum": [
              "task",
              "vendor",
              "risk",
              "policy"
            ],
            "example": "task"
          },
          "attachments": {
            "description": "Optional attachments to include with the comment",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UploadAttachmentDto"
            }
          }
        },
        "required": [
          "content",
          "entityId",
          "entityType"
        ]
      },
      "UpdateCommentDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Updated content of the comment",
            "example": "This task needs to be completed by end of week (updated)",
            "maxLength": 2000
          }
        },
        "required": [
          "content"
        ]
      }
    }
  }
}