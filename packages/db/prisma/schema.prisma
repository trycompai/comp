generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "postgresqlExtensions"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                      String                 @id @default(cuid())
  name                    String?
  full_name               String?
  email                   String?                @unique
  role                    Role                   @default(member)
  onboarded               Boolean                @default(false)
  emailVerified           DateTime?
  image                   String?
  lastLogin               DateTime?
  organizationId          String?
  accounts                Account[]
  Artifact                Artifact[]
  AuditLog                AuditLog[]
  Employee                Employee[]
  AssignedEvidence        OrganizationEvidence[]
  organizationMemberships OrganizationMember[]
  Risk                    Risk[]
  RiskAttachment          RiskAttachment[]
  RiskComment             RiskComment[]
  RiskMitigationTask      RiskMitigationTask[]
  sessions                Session[]
  TaskAttachment          TaskAttachment[]
  TaskComments            TaskComments[]
  PolicyComments          PolicyComments[]
  organization            Organization?          @relation("CurrentOrganization", fields: [organizationId], references: [id])
  VendorComment           VendorComment[]
  VendorMitigationTask    VendorMitigationTask[]
  VendorRiskAssessment    VendorRiskAssessment[]
  VendorTaskAttachment    VendorTaskAttachment[]
  VendorTaskComments      VendorTaskComments[]
  Vendors                 Vendors[]
  OrganizationPolicy      OrganizationPolicy[]
  integrationResults      OrganizationIntegrationResults[]

  @@index([email])
  @@index([organizationId])
}

model Organization {
  id                       String                     @id @default(cuid())
  stripeCustomerId         String?
  name                     String
  subdomain                String                     @unique
  website                  String
  tier                     Tier                       @default(free)
  policiesCreated          Boolean                    @default(false)
  frameworkId              String?
  Artifact                 Artifact[]
  AuditLog                 AuditLog[]
  employees                Employee[]
  Framework                Framework?                 @relation(fields: [frameworkId], references: [id], onDelete: Cascade)
  OrganizationCategory     OrganizationCategory[]
  OrganizationControl      OrganizationControl[]
  OrganizationEvidence     OrganizationEvidence[]
  OrganizationFramework    OrganizationFramework[]
  OrganizationIntegrations OrganizationIntegrations[]
  members                  OrganizationMember[]
  OrganizationPolicy       OrganizationPolicy[]
  Risk                     Risk[]
  RiskAttachment           RiskAttachment[]
  RiskComment              RiskComment[]
  RiskMitigationTask       RiskMitigationTask[]
  TaskAttachment           TaskAttachment[]
  TaskComments             TaskComments[]
  PolicyComments           PolicyComments[]
  users                    User[]                     @relation("CurrentOrganization")
  VendorComment            VendorComment[]
  VendorContact            VendorContact[]
  VendorMitigationTask     VendorMitigationTask[]
  VendorRiskAssessment     VendorRiskAssessment[]
  VendorTaskAttachment     VendorTaskAttachment[]
  VendorTaskComments       VendorTaskComments[]
  Vendors                  Vendors[]
  PortalUser               PortalUser[]
  apiKeys                  OrganizationApiKey[]
  OrganizationIntegrationResults OrganizationIntegrationResults[]

  @@index([stripeCustomerId])
}

model OrganizationIntegrations {
  id             String       @id @default(cuid())
  name           String       @unique
  integration_id String
  settings       Json
  user_settings  Json
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  results OrganizationIntegrationResults[]

  @@index([organizationId])
}

model AuditLog {
  id             String       @id @default(cuid())
  timestamp      DateTime     @default(now())
  userId         String
  organizationId String
  data           Json
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Framework {
  id                    String                  @id @default(cuid())
  name                  String                  @unique
  description           String?
  version               String
  categories            FrameworkCategory[]
  organizations         Organization[]
  OrganizationCategory  OrganizationCategory[]
  OrganizationFramework OrganizationFramework[]
  PolicyFramework       PolicyFramework[]
  OrganizationEvidence  OrganizationEvidence[]

  @@index([id])
}

model OrganizationFramework {
  id                  String                @id @default(cuid())
  organizationId      String
  frameworkId         String
  status              FrameworkStatus       @default(not_started)
  adoptedAt           DateTime              @default(now())
  lastAssessed        DateTime?
  nextAssessment      DateTime?
  organizationControl OrganizationControl[]
  framework           Framework             @relation(fields: [frameworkId], references: [id], onDelete: Cascade)
  organization        Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, frameworkId])
}

model FrameworkCategory {
  id          String    @id @default(cuid())
  name        String
  code        String    @unique
  description String?
  frameworkId String
  controls    Control[]
  framework   Framework @relation(fields: [frameworkId], references: [id], onDelete: Cascade)

  @@index([frameworkId])
}

model Control {
  id                   String                @id @default(cuid())
  code                 String                @unique
  name                 String
  description          String?
  domain               String?
  frameworkCategoryId  String?
  frameworkCategory    FrameworkCategory?    @relation(fields: [frameworkCategoryId], references: [id])
  requirements         ControlRequirement[]
  organizationControls OrganizationControl[]
  PolicyControl        PolicyControl[]

  @@index([frameworkCategoryId])
}

model OrganizationControl {
  id                             String                           @id @default(cuid())
  organizationId                 String
  controlId                      String
  status                         ComplianceStatus                 @default(not_started)
  lastReviewDate                 DateTime?
  nextReviewDate                 DateTime?
  organizationFrameworkId        String?
  organizationCategoryId         String?
  artifacts                      ControlArtifact[]
  control                        Control                          @relation(fields: [controlId], references: [id], onDelete: Cascade)
  OrganizationCategory           OrganizationCategory?            @relation(fields: [organizationCategoryId], references: [id])
  OrganizationFramework          OrganizationFramework?           @relation(fields: [organizationFrameworkId], references: [id])
  organization                   Organization                     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  OrganizationControlRequirement OrganizationControlRequirement[]

  @@index([organizationId])
  @@index([organizationFrameworkId])
  @@index([controlId])
}

model Artifact {
  id             String            @id @default(cuid())
  name           String
  published      Boolean           @default(false)
  needsReview    Boolean           @default(true)
  department     Departments       @default(none)
  type           ArtifactType
  content        Json?
  fileUrl        String?
  version        Int               @default(1)
  lastUpdated    DateTime?
  organizationId String
  ownerId        String?
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner          User?             @relation(fields: [ownerId], references: [id])
  controls       ControlArtifact[]

  @@index([organizationId])
  @@index([type])
}

model ControlArtifact {
  id                    String              @id @default(cuid())
  organizationControlId String
  artifactId            String
  artifact              Artifact            @relation(fields: [artifactId], references: [id], onDelete: Cascade)
  organizationControl   OrganizationControl @relation(fields: [organizationControlId], references: [id], onDelete: Cascade)

  @@index([organizationControlId])
  @@index([artifactId])
}

model Risk {
  id                   String                 @id @default(cuid())
  title                String
  description          String
  category             RiskCategory
  department           Departments?
  status               RiskStatus             @default(open)
  probability          Int                    @default(0)
  impact               Int                    @default(0)
  residual_probability Int                    @default(0)
  residual_impact      Int                    @default(0)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  organizationId       String
  ownerId              String?
  organization         Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner                User?                  @relation(fields: [ownerId], references: [id])
  attachments          RiskAttachment[]
  comments             RiskComment[]
  mitigationTasks      RiskMitigationTask[]
  treatmentStrategy    RiskTreatmentStrategy?
  TaskComments         TaskComments[]

  @@index([organizationId])
  @@index([ownerId])
  @@index([category])
  @@index([status])
}

model RiskComment {
  id             String       @id @default(cuid())
  riskId         String
  ownerId        String
  organizationId String
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner          User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  risk           Risk         @relation(fields: [riskId], references: [id], onDelete: Cascade)

  @@index([riskId])
  @@index([ownerId])
  @@index([organizationId])
}

model RiskMitigationTask {
  id             String               @id @default(cuid())
  title          String
  description    String
  status         RiskTaskStatus       @default(open)
  dueDate        DateTime?
  notifiedAt     DateTime?
  completedAt    DateTime?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  riskId         String
  ownerId        String?
  organizationId String
  organization   Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner          User?                @relation(fields: [ownerId], references: [id])
  risk           Risk                 @relation(fields: [riskId], references: [id], onDelete: Cascade)
  assignments    RiskTaskAssignment[]
  TaskAttachment TaskAttachment[]
  TaskComments   TaskComments[]

  @@index([riskId])
  @@index([ownerId])
  @@index([organizationId])
}

model TaskComments {
  id                   String             @id @default(cuid())
  riskId               String
  riskMitigationTaskId String
  ownerId              String
  organizationId       String
  content              String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  organization         Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner                User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  risk                 Risk               @relation(fields: [riskId], references: [id], onDelete: Cascade)
  riskMitigationTask   RiskMitigationTask @relation(fields: [riskMitigationTaskId], references: [id], onDelete: Cascade)

  @@index([riskId])
  @@index([riskMitigationTaskId])
  @@index([organizationId])
}

model TaskAttachment {
  id                   String             @id @default(cuid())
  riskMitigationTaskId String
  name                 String
  fileUrl              String
  fileKey              String?
  type                 RiskAttachmentType @default(file)
  uploadedAt           DateTime           @default(now())
  ownerId              String?
  organizationId       String
  organization         Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner                User?              @relation(fields: [ownerId], references: [id])
  riskMitigationTask   RiskMitigationTask @relation(fields: [riskMitigationTaskId], references: [id], onDelete: Cascade)

  @@index([riskMitigationTaskId])
  @@index([organizationId])
}

model RiskTreatmentStrategy {
  id          String        @id @default(cuid())
  type        TreatmentType
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  riskId      String        @unique
  risk        Risk          @relation(fields: [riskId], references: [id], onDelete: Cascade)

  @@index([riskId])
}

model Vendors {
  id                   String                 @id @default(cuid())
  name                 String
  website              String
  description          String
  category             VendorCategory
  status               VendorStatus           @default(not_assessed)
  inherent_risk        VendorInherentRisk     @default(unknown)
  residual_risk        VendorResidualRisk     @default(unknown)
  lastAssessed         DateTime?
  nextAssessment       DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  ownerId              String?
  organizationId       String
  VendorComment        VendorComment[]
  VendorContact        VendorContact[]
  VendorMitigationTask VendorMitigationTask[]
  VendorRiskAssessment VendorRiskAssessment[]
  organization         Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner                User?                  @relation(fields: [ownerId], references: [id])

  @@index([organizationId])
  @@index([ownerId])
  @@index([category])
  @@index([status])
}

model VendorContact {
  id             String       @id @default(cuid())
  vendorId       String
  name           String
  email          String
  role           String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  vendor         Vendors      @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId])
  @@index([organizationId])
}

model VendorComment {
  id             String       @id @default(cuid())
  vendorId       String
  ownerId        String
  organizationId String
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner          User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  vendor         Vendors      @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId])
  @@index([ownerId])
  @@index([organizationId])
}

model VendorMitigationTask {
  id                   String                 @id @default(cuid())
  title                String
  description          String
  status               RiskTaskStatus         @default(open)
  dueDate              DateTime?
  completedAt          DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  ownerId              String?
  vendorId             String
  organizationId       String
  organization         Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner                User?                  @relation(fields: [ownerId], references: [id])
  vendor               Vendors                @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  assignments          VendorTaskAssignment[]
  VendorTaskAttachment VendorTaskAttachment[]
  VendorTaskComments   VendorTaskComments[]

  @@index([vendorId])
  @@index([ownerId])
  @@index([organizationId])
}

model VendorTaskComments {
  id                     String               @id @default(cuid())
  vendorMitigationTaskId String
  ownerId                String
  organizationId         String
  content                String
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  organization           Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner                  User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  vendorMitigationTask   VendorMitigationTask @relation(fields: [vendorMitigationTaskId], references: [id], onDelete: Cascade)

  @@index([vendorMitigationTaskId])
  @@index([organizationId])
}

model VendorTaskAttachment {
  id                     String               @id @default(cuid())
  vendorMitigationTaskId String
  name                   String
  fileUrl                String
  fileKey                String?
  type                   RiskAttachmentType   @default(file)
  uploadedAt             DateTime             @default(now())
  ownerId                String?
  organizationId         String
  organization           Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner                  User?                @relation(fields: [ownerId], references: [id])
  vendorMitigationTask   VendorMitigationTask @relation(fields: [vendorMitigationTaskId], references: [id], onDelete: Cascade)

  @@index([vendorMitigationTaskId])
  @@index([organizationId])
}

model VendorRiskAssessment {
  id             String       @id @default(cuid())
  vendorId       String
  ownerId        String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner          User?        @relation(fields: [ownerId], references: [id])
  vendor         Vendors      @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@index([vendorId])
  @@index([organizationId])
}

model RiskAttachment {
  id             String             @id @default(cuid())
  riskId         String
  name           String
  fileUrl        String
  fileKey        String?
  type           RiskAttachmentType @default(file)
  uploadedAt     DateTime           @default(now())
  ownerId        String?
  organizationId String
  organization   Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner          User?              @relation(fields: [ownerId], references: [id])
  risk           Risk               @relation(fields: [riskId], references: [id], onDelete: Cascade)

  @@index([riskId])
  @@index([organizationId])
}

model OrganizationMember {
  id             String         @id @default(cuid())
  role           MembershipRole @default(member)
  invitedEmail   String?
  accepted       Boolean        @default(false)
  department     Departments    @default(none)
  joinedAt       DateTime       @default(now())
  lastActive     DateTime?
  userId         String
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([userId])
}

model RiskTaskAssignment {
  id         String             @id @default(cuid())
  assignedAt DateTime           @default(now())
  taskId     String
  employeeId String
  employee   Employee           @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  task       RiskMitigationTask @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, employeeId])
  @@index([taskId])
  @@index([employeeId])
}

model VendorTaskAssignment {
  id         String               @id @default(cuid())
  assignedAt DateTime             @default(now())
  taskId     String
  employeeId String
  employee   Employee             @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  task       VendorMitigationTask @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, employeeId])
  @@index([taskId])
  @@index([employeeId])
}

model EmployeeRequiredTask {
  id            String         @id @default(cuid())
  code          String         @unique
  name          String
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  employeeTasks EmployeeTask[]
}

model EmployeeTask {
  id                String               @id @default(cuid())
  employeeId        String
  requiredTaskId    String
  status            EmployeeTaskStatus   @default(assigned)
  completedAt       DateTime?
  overrideCompliant Boolean              @default(false)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  employee          Employee             @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  requiredTask      EmployeeRequiredTask @relation(fields: [requiredTaskId], references: [id], onDelete: Cascade)

  @@unique([employeeId, requiredTaskId])
}

model Employee {
  id                       String                     @id @default(cuid())
  name                     String
  email                    String
  department               Departments                @default(none)
  isActive                 Boolean                    @default(true)
  externalEmployeeId       String?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  organizationId           String
  userId                   String?
  linkId                   String?
  link                     PortalUser?                @relation(fields: [linkId], references: [id])
  organization             Organization               @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user                     User?                      @relation(fields: [userId], references: [id])
  EmployeePolicyAcceptance EmployeePolicyAcceptance[]
  employeeTasks            EmployeeTask[]
  RiskTaskAssignment       RiskTaskAssignment[]
  VendorTaskAssignment     VendorTaskAssignment[]

  @@unique([email, organizationId])
  @@index([organizationId])
  @@index([userId])
  @@index([department])
}

model Policy {
  id                  String                     @id @default(cuid())
  slug                String                     @unique
  name                String
  description         String?
  content             Json[]
  version             String?
  usedBy              Json
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
  frequency           Frequency?
  ControlRequirement  ControlRequirement[]
  employeeAcceptances EmployeePolicyAcceptance[]
  OrganizationPolicy  OrganizationPolicy[]
  PolicyControl       PolicyControl[]
  policyFiles         PolicyFile[]
  policyFrameworks    PolicyFramework[]
}

model PolicyFile {
  id        String   @id @default(cuid())
  policyId  String
  fileName  String
  fileUrl   String
  fileType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  policy    Policy   @relation(fields: [policyId], references: [id], onDelete: Cascade)
}

model PolicyFramework {
  id          String    @id @default(cuid())
  policyId    String
  frameworkId String
  framework   Framework @relation(fields: [frameworkId], references: [id], onDelete: Cascade)
  policy      Policy    @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@unique([policyId, frameworkId])
}

model EmployeePolicyAcceptance {
  id         String    @id @default(cuid())
  employeeId String
  policyId   String
  readAt     DateTime?
  acceptedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  policy     Policy    @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@unique([employeeId, policyId])
}

model PolicyControl {
  id        String  @id @default(cuid())
  policyId  String
  controlId String
  control   Control @relation(fields: [controlId], references: [id], onDelete: Cascade)
  policy    Policy  @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@unique([policyId, controlId])
}

model ControlRequirement {
  id                             String                           @id @default(cuid())
  controlId                      String
  type                           RequirementType
  description                    String?
  policyId                       String?
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime                         @updatedAt
  name                           String                           @default("")
  evidenceId                     String?
  frequency                      Frequency?
  control                        Control                          @relation(fields: [controlId], references: [id], onDelete: Cascade)
  evidence                       Evidence?                        @relation(fields: [evidenceId], references: [id])
  policy                         Policy?                          @relation(fields: [policyId], references: [id])
  OrganizationControlRequirement OrganizationControlRequirement[]

  @@index([controlId])
}

model OrganizationControlRequirement {
  id                    String          @id @default(cuid())
  organizationControlId String
  controlRequirementId  String
  content               Json?
  createdAt             DateTime        @default(now())
  description           String?
  fileUrl               String?
  published             Boolean         @default(false)
  type                  RequirementType
  updatedAt             DateTime        @updatedAt

  organizationPolicyId   String?
  organizationEvidenceId String?
  controlRequirement     ControlRequirement    @relation(fields: [controlRequirementId], references: [id], onDelete: Cascade)
  organizationControl    OrganizationControl   @relation(fields: [organizationControlId], references: [id], onDelete: Cascade)
  organizationEvidence   OrganizationEvidence? @relation(fields: [organizationEvidenceId], references: [id], onDelete: Cascade)
  organizationPolicy     OrganizationPolicy?   @relation(fields: [organizationPolicyId], references: [id], onDelete: Cascade)

  @@unique([organizationControlId, controlRequirementId])
}

model OrganizationPolicy {
  id                             String                           @id @default(cuid())
  organizationId                 String
  status                         PolicyStatus                     @default(draft)
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime                         @updatedAt
  policyId                       String
  content                        Json[]
  frequency                      Frequency?
  lastPublishedAt                DateTime?
  OrganizationControlRequirement OrganizationControlRequirement[]
  PolicyComments                 PolicyComments[]
  organization                   Organization                     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  policy                         Policy                           @relation(fields: [policyId], references: [id], onDelete: Cascade)
  ownerId                        String?
  owner                          User?                            @relation(fields: [ownerId], references: [id])
  department                     Departments?
  reviewDate                     DateTime?

  @@unique([organizationId, policyId])
  @@index([organizationId])
  @@index([policyId])
}

model OrganizationCategory {
  id                  String                @id @unique @default(cuid())
  name                String
  description         String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  organizationId      String
  frameworkId         String
  framework           Framework             @relation(fields: [frameworkId], references: [id], onDelete: Cascade)
  organization        Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationControl OrganizationControl[]

  @@index([organizationId])
}

model Evidence {
  id                   String                 @id @unique @default(cuid())
  name                 String
  description          String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  frequency            Frequency?
  ControlRequirement   ControlRequirement[]
  OrganizationEvidence OrganizationEvidence[]
}

model OrganizationEvidence {
  id              String       @id @unique @default(cuid())
  name            String
  description     String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  published       Boolean      @default(false)
  organizationId  String
  additionalUrls  String[]
  evidenceId      String
  fileUrls        String[]
  frequency       Frequency?
  lastPublishedAt DateTime?
  assigneeId      String?
  department      Departments? @default(none)
  isNotRelevant   Boolean      @default(false)

  frameworkId String
  framework   Framework @relation(fields: [frameworkId], references: [id], onDelete: Cascade)

  OrganizationControlRequirement OrganizationControlRequirement[]
  assignee                       User?                            @relation(fields: [assigneeId], references: [id])
  evidence                       Evidence                         @relation(fields: [evidenceId], references: [id], onDelete: Cascade)
  organization                   Organization                     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([assigneeId])
}

model PortalUser {
  id             String          @id
  name           String
  email          String          @unique
  emailVerified  Boolean
  image          String?
  createdAt      DateTime
  updatedAt      DateTime
  organizationId String?
  employees      Employee[]
  accounts       PortalAccount[]
  sessions       PortalSession[]
  organization   Organization?   @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("portal_user")
}

model PortalSession {
  id        String     @id
  expiresAt DateTime
  token     String     @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      PortalUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portal_session")
}

model PortalAccount {
  id                    String     @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  PortalUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portal_account")
}

model PortalVerification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("portal_verification")
}

model OrganizationApiKey {
  id             String       @id @default(cuid())
  name           String // A friendly name for the API key
  key            String       @unique // The hashed API key
  salt           String? // Salt used for hashing the API key (nullable for backward compatibility)
  createdAt      DateTime     @default(now())
  expiresAt      DateTime? // Optional expiration date
  lastUsedAt     DateTime? // Track when the key was last used
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  isActive       Boolean      @default(true)

  @@index([organizationId])
  @@index([key])
}

model PolicyComments {
  id                   String             @id @default(cuid())
  organizationPolicyId String
  ownerId              String
  organizationId       String
  content              String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  organization         Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner                User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  organizationPolicy   OrganizationPolicy @relation(fields: [organizationPolicyId], references: [id], onDelete: Cascade)

  @@index([organizationPolicyId])
  @@index([organizationId])
}

enum Tier {
  free
  pro
}

enum Role {
  member
  admin
}

enum Departments {
  none
  admin
  gov
  hr
  it
  itsm
  qms
}

enum RequirementType {
  policy
  file
  link
  procedure
  evidence
  training
}

enum Frequency {
  monthly
  quarterly
  yearly
}

enum FrameworkStatus {
  not_started
  in_progress
  compliant
  non_compliant
}

enum ComplianceStatus {
  not_started
  in_progress
  compliant
  non_compliant
}

enum ArtifactType {
  policy
  evidence
  procedure
  training
}

enum RiskLevel {
  low
  medium
  high
}

enum RiskCategory {
  customer
  governance
  operations
  other
  people
  regulatory
  reporting
  resilience
  technology
  vendor_management
}

enum TreatmentType {
  accept
  avoid
  mitigate
  transfer
}

enum RiskStatus {
  open
  pending
  closed
  archived
}

enum RiskTaskStatus {
  open
  pending
  closed
}

enum RiskAttachmentType {
  file
  url
}

enum VendorCategory {
  cloud
  infrastructure
  software_as_a_service
  finance
  marketing
  sales
  hr
  other
}

enum VendorStatus {
  not_assessed
  in_progress
  assessed
}

enum VendorInherentRisk {
  low
  medium
  high
  unknown
}

enum VendorResidualRisk {
  low
  medium
  high
  unknown
}

enum MembershipRole {
  owner
  admin
  member
  viewer
}

enum EmployeeTaskStatus {
  assigned
  in_progress
  completed
  overdue
}

enum PolicyStatus {
  draft
  published
  archived
  needs_review
}


model OrganizationIntegrationResults {
  id                        String        @id @default(cuid())
  title                     String?
  status                    String
  label                     String?       // PASS, FAIL, ERROR
  resultDetails             Json?         // Stores detailed test results
  completedAt               DateTime?     @default(now())
  organizationIntegrationId String
  organizationId            String
  assignedUserId            String?

  assignedUser             User?          @relation(fields: [assignedUserId], references: [id], onDelete: Cascade)
  organizationIntegration  OrganizationIntegrations @relation(fields: [organizationIntegrationId], references: [id], onDelete: Cascade)
  organization             Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([assignedUserId])
  @@index([organizationIntegrationId])
  @@index([organizationId])
  @@map("Organization_integration_results")
}