version: 0.2

phases:
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$ECR_REPOSITORY_URI
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - echo "Installing dependencies..."
      - curl -fsSL https://bun.sh/install | bash

  build:
    commands:
      # Environment setup
      - export PATH="/root/.bun/bin:$PATH"
      - export PGSSLMODE=require
      - export NODE_ENV=production
      - export NEXT_TELEMETRY_DISABLED=1
      - export UV_THREADPOOL_SIZE=36
      - export NODE_OPTIONS="--max-old-space-size=65536"

      # Validate environment variables
      - echo "Validating environment variables..."
      - '[ -n "$DATABASE_URL" ] || { echo "❌ DATABASE_URL is not set"; exit 1; }'
      - '[ -n "$BASE_URL" ] || { echo "❌ BASE_URL is not set"; exit 1; }'
      - '[ -n "$BETTER_AUTH_URL" ] || { echo "❌ BETTER_AUTH_URL is not set"; exit 1; }'

      # Install only API workspace dependencies
      - echo "Installing API dependencies only..."
      - bun install --filter=@comp/api --frozen-lockfile || bun install --filter=@comp/api --ignore-scripts || bun install --ignore-scripts

      # Build NestJS application (prebuild automatically handles Prisma)
      - echo "Building NestJS application..."
      - echo "APP_NAME is set to $APP_NAME"
      - echo "Current directory $(pwd)"
      - echo "Available apps $(ls -la apps/)"
      - cd apps/api
      - echo "Changed to $(pwd)"
      - echo "Running build (includes automatic prebuild db:generate)..."
      - bun run build

      # Verify build output exists
      - echo "Checking build output..."
      - ls -la dist/
      - ls -la dist/src/
      - '[ -f "dist/src/main.js" ] || { echo "❌ main.js not found in dist/src"; exit 1; }'

      # Create self-contained bundle for Docker (stay in apps/api)
      - echo "Creating self-contained bundle..."
      - mkdir -p ../docker-build

      # Copy built application (preserves NestJS structure)
      - echo "Copying built application..."
      - cp -r dist/* ../docker-build/

      # Copy prisma folder (needed for runtime imports)
      - echo "Copying prisma folder..."
      - cp -r prisma ../docker-build/

      # Verify files were copied correctly
      - echo "Verifying copied files..."
      - ls -la ../docker-build/
      - ls -la ../docker-build/src/
      - '[ -f "../docker-build/src/main.js" ] || { echo "❌ main.js not found in docker-build/src"; exit 1; }'

      # Copy entire node_modules for runtime (includes @trycompai/db from npm)
      - echo "Skipping host node_modules copy; Dockerfile installs prod deps inside image"

      # Copy Dockerfile
      - echo "Copying Dockerfile..."
      - cp Dockerfile ../docker-build/

      # Build Docker image
      - echo "Building Docker image..."
      - docker build --build-arg BUILDKIT_INLINE_CACHE=1 -t $ECR_REPOSITORY_URI:$IMAGE_TAG ../docker-build/
      - docker tag $ECR_REPOSITORY_URI:$IMAGE_TAG $ECR_REPOSITORY_URI:latest

  post_build:
    commands:
      - echo "Pushing images to ECR..."
      - docker push $ECR_REPOSITORY_URI:$IMAGE_TAG
      - docker push $ECR_REPOSITORY_URI:latest
      - echo "Updating ECS service..."
      - aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment
      - 'printf "[{\"name\":\"%s-container\",\"imageUri\":\"%s\"}]" api $ECR_REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json'

cache:
  paths:
    - 'node_modules/**/*'
    - 'packages/db/node_modules/**/*'
    - 'apps/api/node_modules/**/*'
    - '/root/.bun/install/cache/**/*'
    - 'bun.lock'

artifacts:
  files:
    - imagedefinitions.json
  name: ${APP_NAME}-build
